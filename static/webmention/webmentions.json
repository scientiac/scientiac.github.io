{"links":[{"source":"https://ap.brid.gy/convert/web/https://fosstodon.org/users/scientiac%23likes/11336955","verified":true,"verified_date":"2025-01-14T17:32:54+00:00","id":1875503,"private":false,"data":{"author":{"name":"scientiac","url":"https://fosstodon.org/@scientiac","photo":"https://webmention.io/avatar/cdn.fosstodon.org/66286e1ad748752a51f50229634bf2569596f9acb40ab682f1c36139fbe8eec4.png"},"url":"https://ap.brid.gy/convert/web/https://fosstodon.org/users/scientiac%23likes/11336955","name":null,"content":"<a href=\"https://scientiac.space/syndications/posse-2025-01-14/\">likes this.</a>","published":null,"published_ts":null},"activity":{"type":"like"},"target":"https://scientiac.space/syndications/posse-2025-01-14/"},{"source":"https://ap.brid.gy/convert/web/https://fosstodon.org/users/scientiac/statuses/113441697792964374%23updates/1730999396","verified":true,"verified_date":"2024-11-07T17:18:02+00:00","id":1857343,"private":false,"data":{"author":{"name":"scientiac","url":"https://fosstodon.org/@scientiac","photo":"https://webmention.io/avatar/cdn.fosstodon.org/66286e1ad748752a51f50229634bf2569596f9acb40ab682f1c36139fbe8eec4.png"},"url":"https://fosstodon.org/@scientiac/113441697792964374","name":null,"content":"<p>I recently added webmentions support on my website and I have to say, it's very cool. And <span class=\"h-card\"><a href=\"https://web.brid.gy/scientiac.space\" class=\"u-url\">@<span>scientiac.space</span></a></span> (<a href=\"https://fed.brid.gy\"><span>https://</span><span>fed.brid.gy</span><span></span></a>) made it possible to interact with the site through the fediverse, which is super awesome.</p><p>Here's a POSSEd post using brid.gy finally adding meaning to my POSSE section:</p><p><a href=\"https://fosstodon.org/@scientiac.space@web.brid.gy/113436506740535947\"><span>https://</span><span>fosstodon.org/@scientiac.space</span><span>@web.brid.gy/113436506740535947</span></a></p><p><a href=\"https://fosstodon.org/tags/indieweb\">#<span>indieweb</span></a> <a href=\"https://fosstodon.org/tags/webmention\">#<span>webmention</span></a></p>\n<a class=\"u-mention\" href=\"https://scientiac.space/\"></a>\n<a href=\"https://fosstodon.org/tags/indieweb\">#indieweb</a>\n<a href=\"https://fosstodon.org/tags/webmention\">#webmention</a>","published":"2024-11-07T12:35:37+00:00","published_ts":1730982937},"activity":{"type":"link"},"target":"https://scientiac.space/"},{"source":"https://ap.brid.gy/convert/web/https://fosstodon.org/users/scientiac/statuses/113436558922438202%23updates/1730988345","verified":true,"verified_date":"2024-11-07T14:05:47+00:00","id":1857308,"private":false,"data":{"author":{"name":"scientiac","url":"https://fosstodon.org/@scientiac","photo":"https://webmention.io/avatar/cdn.fosstodon.org/66286e1ad748752a51f50229634bf2569596f9acb40ab682f1c36139fbe8eec4.png"},"url":"https://fosstodon.org/@scientiac/113436558922438202","name":null,"content":"<p><span class=\"h-card\"><a href=\"https://web.brid.gy/scientiac.space\" class=\"u-url\">@<span>scientiac.space</span></a></span> </p><p>This is a reply from mastodon.</p>\n<a class=\"u-mention\" href=\"https://scientiac.space/\"></a>","published":"2024-11-06T14:48:44+00:00","published_ts":1730904524},"activity":{"type":"reply"},"target":"https://scientiac.space/"},{"source":"https://ap.brid.gy/convert/web/https://fosstodon.org/users/scientiac/statuses/113436558922438202%23updates/1730988345","verified":true,"verified_date":"2024-11-07T14:05:47+00:00","id":1857309,"private":false,"data":{"author":{"name":"scientiac","url":"https://fosstodon.org/@scientiac","photo":"https://webmention.io/avatar/cdn.fosstodon.org/66286e1ad748752a51f50229634bf2569596f9acb40ab682f1c36139fbe8eec4.png"},"url":"https://fosstodon.org/@scientiac/113436558922438202","name":null,"content":"<p><span class=\"h-card\"><a href=\"https://web.brid.gy/scientiac.space\" class=\"u-url\">@<span>scientiac.space</span></a></span> </p><p>This is a reply from mastodon.</p>\n<a class=\"u-mention\" href=\"https://scientiac.space/\"></a>","published":"2024-11-06T14:48:44+00:00","published_ts":1730904524},"activity":{"type":"reply"},"target":"https://scientiac.space/syndications/posse-2024-11-05/"},{"source":"https://ap.brid.gy/convert/web/https://fosstodon.org/users/scientiac/statuses/113441697792964374%23updates/1730982983","verified":true,"verified_date":"2024-11-07T12:36:51+00:00","id":1857299,"private":false,"data":{"author":{"name":"scientiac","url":"https://fosstodon.org/@scientiac","photo":"https://webmention.io/avatar/cdn.fosstodon.org/66286e1ad748752a51f50229634bf2569596f9acb40ab682f1c36139fbe8eec4.png"},"url":"https://fosstodon.org/@scientiac/113441697792964374","name":null,"content":"<p>I recently added webmentions support on my website and I have to say, it's very cool. And <span class=\"h-card\"><a href=\"https://web.brid.gy/scientiac.space\" class=\"u-url\">@<span>scientiac.space</span></a></span> (<a href=\"https://fed.brid.gy\"><span>https://</span><span>fed.brid.gy</span><span></span></a>) made it possible to interact with the site through the fediverse, which is super awesome.</p><p>Here's a POSSEd post using brid.gy finally adding meaning to my POSSE section:</p><p><a href=\"https://fosstodon.org/@scientiac.space@web.brid.gy/113436506740535947\"><span>https://</span><span>fosstodon.org/@scientiac.space</span><span>@web.brid.gy/113436506740535947</span></a></p>\n<a class=\"u-mention\" href=\"https://scientiac.space/\"></a>","published":"2024-11-07T12:35:37+00:00","published_ts":1730982937},"activity":{"type":"link"},"target":"https://scientiac.space/"},{"source":"https://ap.brid.gy/convert/web/https://fosstodon.org/users/scientiac/statuses/113441697792964374/activity","verified":true,"verified_date":"2024-11-07T12:36:29+00:00","id":1857298,"private":false,"data":{"author":{"name":"scientiac","url":"https://fosstodon.org/@scientiac","photo":"https://webmention.io/avatar/cdn.fosstodon.org/66286e1ad748752a51f50229634bf2569596f9acb40ab682f1c36139fbe8eec4.png"},"url":"https://fosstodon.org/@scientiac/113441697792964374","name":null,"content":"<p>I recently added webmentions support on my website and I have to say, it's very cool. And <span class=\"h-card\"><a href=\"https://web.brid.gy/scientiac.space\" class=\"u-url\">@<span>scientiac.space</span></a></span> (<a href=\"https://fed.brid.gy/\"><span>https://</span><span>fed.brid.gy/</span><span></span></a>) made it possible to interact with the site through the fediverse, which is super awesome.</p><p>Here's a POSSEd post using brid.gy finally adding meaning to my POSSE section:</p><p><a href=\"https://fosstodon.org/@scientiac.space@web.brid.gy/113436506740535947\"><span>https://</span><span>fosstodon.org/@scientiac.space</span><span>@web.brid.gy/113436506740535947</span></a></p>\n<a class=\"u-mention\" href=\"https://scientiac.space/\"></a>","published":"2024-11-07T12:35:37+00:00","published_ts":1730982937},"activity":{"type":"link"},"target":"https://scientiac.space/"},{"source":"https://scientiac.space/blog/kde-network-nepal/","verified":true,"verified_date":"2024-11-06T02:17:33+00:00","id":1857107,"private":false,"data":{"author":{"name":"scientiac","url":"https://scientiac.space","photo":"https://webmention.io/avatar/scientiac.space/c0230defbab3e3d3bc93e2dd1e9b71a6208edde48b170add2ff9ef6fbe1c35ec.png"},"url":"https://scientiac.space/blog/kde-network-nepal/","name":"KDE Network Nepal: Event 0","content":"<h3>KDE?</h3><p>Somewhere around 2017, I started using Linux. KDE was the first Distro I ever tried. It was the whole reason <a href=\"https://scientiac.space/blog/destination-linux/\">why I switched to Linux</a>. Now that I realize, it was actually <code>KDE Plasma</code> I was attracted to and I still love it. I can make my desktop however I want it to look, that was enough for me to step to the Linux world. KDE also makes a good deal of other software and not just plasma, <code>Kdenlive</code> and <code>Krita</code> being two of the most popular products. I particularly love <code>Kstars</code> to track stars and constellations when I am stargazing.</p><p><img alt=\"kde dragons\" src=\"https://scientiac.space/images/kde_network_nepal/dragons_kde.png\" /></p><h1>Network Nepal</h1><p>KDE isn't a company of sorts, it's a community. A group of people sharing interests with each others and developing software for everyone. And not just any kind of software, high-end Free/Libre and Open Source Software. People are the heart of the community and the more people there are the better will be KDE.</p><blockquote><p><strong>KDE Network?</strong><br /> The KDE Network is a group of KDE representatives in their respective cities/countries. They promote KDE, and it’s work in their local community.</p></blockquote><p><img alt=\"Network Nepal\" src=\"https://scientiac.space/images/kde_network_nepal/network_nepal.jpg\" /></p><p>After learning about the KDE Network and a way to contribute to KDE as a Student. I had proposed an idea of a KDE Network for Nepal to represent KDE in Nepal to my friends and simultaneously to the KDE Promo team. Due to the support of KDE Promo team especially <code>@aniqakhokhar</code> and <code>@paulb</code> from the team, I along with my fellow FOSS geek friends <a href=\"https://scientiac.space/syndications/posse-2024-02-27/\">decided to Introduce the Network from an Introductory event</a> along with KDE 6 Megarelease celebration.</p><p><img alt=\"Network Nepal Presentation on Linux\" src=\"https://scientiac.space/images/kde_network_nepal/network_presentation.jpg\" /></p><p>We hosted a meetup for students interested in Free and Open Source Software (FOSS). The event welcomed freshmen from computer engineering and electronics communication and information engineering programs, alongside some sophomores and juniors.</p><p>The meetup covered a range of FOSS topics, including what it is and how it works. Attendees learned about Linux, its components, and the KDE Plasma desktop environment. They also explored the KDE software collection, and then got to know what the Network was. To make the event fun, there was a KDE trivia quiz too!</p><p><img alt=\"Network Nepal Setup\" src=\"https://scientiac.space/images/kde_network_nepal/network_kde_setup.jpg\" /></p><p>Along with us, some students shared their experiences with FOSS, making the meetup a great interactive session. Everyone had a chance to learn from each other, and it was a window to the exciting world of open-source software for many students.</p><p>I'm excited to organize future events showcasing the exciting ecosystem of KDE software and Linux, spreading the knowledge of FOSS to a wider audience. Till then...</p><p>KDE Network Nepal's [matrix] channel to chat: <a href=\"https://go.kde.org/matrix/#/%23kde-network-nepal:kde.org\">#kde-network-nepal:kde.org</a><br /> Visit <a href=\"https://kde.org\">kde.org</a> to know more about KDE Software and the awesome community.</p>","published":"2024-04-05T00:00:00+00:00","published_ts":1712275200},"activity":{"type":"link"},"target":"https://scientiac.space/syndications/posse-2024-02-27/"},{"source":"https://scientiac.space/blog/mastodon/","verified":true,"verified_date":"2024-11-06T01:45:45+00:00","id":1856941,"private":false,"data":{"author":{"name":"scientiac","url":"https://scientiac.space","photo":"https://webmention.io/avatar/scientiac.space/c0230defbab3e3d3bc93e2dd1e9b71a6208edde48b170add2ff9ef6fbe1c35ec.png"},"url":"https://scientiac.space/blog/mastodon/","name":"Mastodon","content":"<h2>A Secure Decentralized Social Network.</h2><p>Mastodon is a federated social media platform ( Actually a microblogging platform similar to Twitter ) based on a communication protocol called Activity Pub. It was released on 16th March 2016 and was created to be a safe place to share Ideas between people without having to trust a single organization for all your data. It is a free and open source software and can be used to self host social networking service so that you have the option to keep your data with you or with whom you trust.</p><ul><li>Federation</li></ul><p>The greatest feature of mastodon is it's federated nature. Mastodon doesn't have a single server that store and moderates the data coming in and going out from it unlike Facebook, Instagram, Twitter or any other centralized platforms have. Which gives you the option to choose who to trust with your data and why.</p><ul><li>Instances</li></ul><p>Mastodon has many servers with their own moderator(s) all around the globe hosted by different organizations with different mindset and different regulations. These servers are known as Instances which can be categorised by the topics,places, ethnicity, etc. So they don't have a single set of rules and regulations but have different rules on different instances making communication between known and unknown communities easier.</p><ul><li>Moderation</li></ul><p>Different instances have different populations and are moderated by different moderators which makes it easier to reach the users and respond to their issue. If a instance has 1000 peoples and two moderators, a moderators should only have to moderate 500 peoples, since the moderators are also the active members of the community who constantly interact with what is happening in the community they can solve the issues of the users in a more systematic and timely manner. On the other hand Twitter like platforms mostly use AI to moderate and the issues might take days or even weeks to get responded. There are times when people are responded for their issues by their moderators within minutes in mastodon.</p><ul><li>Communication</li></ul><p>Since it is based on Activity Pub anyone can communicate with anyone on the other instance or even with other platforms like pleroma and peertube( based on Activity Pub ) from a single mastodon account without having to make different accounts for different platforms in order to communicate with the people in that platform ( Like you need a seperate accounts to follow users in different platforms like Facebook, Twitter, Instagram, YouTube ,etc. )</p><ul><li>Flexibility</li></ul><p>Mastodon includes a number of specific privacy features. Each message has a variety of privacy options available, and users can choose whether the message is public or private. Public messages display on a global feed, known as a timeline, and private messages are only shared on the timelines of the user's followers. Messages can also be marked as unlisted from timelines or direct between users. Users can also mark their accounts as completely private. In the timeline, polls can also be made and you can also create messages that can be displayed with an optional \"content warning\" feature, which requires readers to click on the content to reveal the rest of the message. Mastodon servers have used this feature to hide spoilers, trigger warnings, and not safe for work (NSFW) content, though some accounts use the feature to hide links and thoughts others might not want to read.</p><p>Check out my article on <a href=\"https://scientiac.space/blog/fediverse/\">fediverse</a> for more details.</p>","published":"2021-08-16T00:00:00+00:00","published_ts":1629072000},"activity":{"type":"link"},"target":"https://scientiac.space/blog/fediverse/"},{"source":"https://scientiac.space/blog/yantra-bot/","verified":true,"verified_date":"2024-11-06T17:37:54+00:00","id":1856934,"private":false,"data":{"author":{"name":"scientiac","url":"https://scientiac.space","photo":"https://webmention.io/avatar/scientiac.space/c0230defbab3e3d3bc93e2dd1e9b71a6208edde48b170add2ff9ef6fbe1c35ec.png"},"url":"https://scientiac.space/blog/yantra-bot/","name":"Manoid: A Waste Management Robot","content":"<p><strong>A Smart Waste Management Robot using Python and OpenCV</strong> that can detect the nearest waste(Determined by an <code>no 8</code> ArUco Marker in the video), navigate to it using the shortest path on the map, pick it(Denoted by a <code>5 second</code> stop in the video) and reach the destination(Determined By <code>no 5</code> Aruco Marker in the video) to dump it and again repeat the process if more waste is detected; with only sensor being an overhead camera tracking the ArUco Markers.</p><p></p><blockquote><p><em>In the video, I am picking the robot up sometimes to keep it on a new position to show that it can track it's last position and go directly there instead of trying to calculate the route again.</em></p></blockquote><p>In today's world, efficient waste management is becoming increasingly crucial due to rapid urbanization and population growth. Traditional methods of waste collection and dumping are labor-intensive and often inefficient. By integrating robotics and advanced algorithms, we can streamline these processes, reduce human effort, and ensure a cleaner environment. This project, 'manoid', aims to demonstrate how a robot can autonomously detect, navigate, and manage waste using only a single overhead camera and advanced computer vision techniques.</p><blockquote><p>I have written another blog post related to this: <a href=\"https://scientiac.space/blog/esp-mosquitto/\">Manoid: Communication</a></p></blockquote><p><strong>Let's see how it was made.</strong></p><h3>Requirements:</h3><strong>Category</strong><strong>Component</strong>HardwareESP32 MicrocontrollerHardwareL298N Motor DriverHardwareDC Motor and WheelsHardwareA 12V BatteryHardwareA camera (I used my phone with an IP Camera app for video streaming)SoftwarePython (for publishing)SoftwareArduino IDE (for ESP32 firmware)Softwaremosquitto (for serving)<h2>Basic Setup</h2><h3>Setting Up Arduino IDE</h3><p><strong>To install the ESP32 board in your Arduino IDE, follow these instructions:</strong></p><ol><li>In your Arduino IDE, go to File &gt; Preferences.</li><li>Enter the following into the “Additional Board Manager URLs” field:</li></ol><pre style=\"background-color:#282828;\"><code><span>\n</span><span>  </span><span style=\"color:#fdf4c1;\">https://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package_esp32_index.json\n</span><span>\n</span></code></pre><ol start=\"3\"><li>Click the “OK” button.</li><li>Open the Boards Manager. Go to Tools &gt; Board &gt; Boards Manager.</li><li>Search for ESP32 and press the install button for the “ESP32 by Espressif Systems”.</li><li>Once installed, select your ESP32 board in Tools &gt; Board menu.</li><li>Select the appropriate Port in Tools &gt; Port menu (in my case it was the <code>DOIT ESP32 DEVKIT V1</code>).</li></ol><p>Now your Arduino IDE is set up to work with ESP32.</p><h3>Setting Up The Environment</h3><p>I've got my environment all sorted out with Nix and Nix Flake, and I've made it even easier with direnv activation. Mosquitto's up and running smoothly on its default port 1883. <code>python</code> and it's dependencies <code>opencv</code>,<code>numpy</code>,<code>paho-mqtt</code> and <code>flask</code> in a virtual environment are set up via nix flakes as well. You can look at the <a href=\"https://nix.dev/\">nix documentation</a> to know more about how it works.</p><p><strong>To set it up:</strong></p><ol><li>I assume that nix is installed with flakes enabled on your computer.</li><li>Clone the repo and enter the environment by running <code>nix develop</code> or allowing <code>direnv</code> to do it for you if you have it installed.</li></ol><pre style=\"background-color:#282828;\"><code><span>\n</span><span>  </span><span style=\"color:#fdf4c1;\">git clone https://github.com/scientiac/manoid\n</span><span>\n</span></code></pre><ol start=\"3\"><li>A MQTT server will be running as soon as you enter the environment on the default port of <code>1883</code> and you can check the logs using the <code>screen</code> command.</li><li>Change parameters to match your device and make sure everything in on point.</li><li>Run the <code>main.py</code> script and admire the magic.</li></ol><h3>Changing Parameters</h3><p>When adjusting parameters due to dynamic changes in Wi-Fi or IP addresses, several key locations in the code need to be updated to ensure MQTT and IP camera is properly connected. Here's a breakdown of where to make these adjustments:</p><p>In the <code>esp32.ino</code> file:</p><pre style=\"background-color:#282828;\"><code><span>\n</span><span>  </span><span style=\"color:#fa5c4b;\">const char</span><span style=\"color:#fe8019;\">*</span><span> ssid </span><span style=\"color:#fe8019;\">= </span><span style=\"color:#b8bb26;\">\"Your_WIFI_SSID\"</span><span>;\n</span><span>  </span><span style=\"color:#fa5c4b;\">const char</span><span style=\"color:#fe8019;\">*</span><span> password </span><span style=\"color:#fe8019;\">= </span><span style=\"color:#b8bb26;\">\"Your_WIFI_Password\"</span><span>;\n</span><span>  </span><span style=\"color:#fa5c4b;\">const char</span><span style=\"color:#fe8019;\">*</span><span> mqtt_server </span><span style=\"color:#fe8019;\">= </span><span style=\"color:#b8bb26;\">\"Your_MQTT_Server_IP\"</span><span>;\n</span><span>\n</span></code></pre><p>In the <code>main.py</code> file:</p><pre style=\"background-color:#282828;\"><code><span>\n</span><span>  </span><span style=\"color:#fdf4c1;\">MQTT_BROKER </span><span style=\"color:#fe8019;\">= </span><span style=\"color:#b8bb26;\">\"Your_MQTT_Server_IP\" </span><span style=\"color:#928374;font-style:italic;\"># this is at the top of the document\n</span><span>  args</span><span style=\"color:#fe8019;\">=</span><span>(</span><span style=\"color:#b8bb26;\">\"http://Your_IP_Camera_feed_Address\"</span><span>,) </span><span style=\"color:#928374;font-style:italic;\"># this is almost at the end of the document\n</span><span>  \n</span><span>  </span><span style=\"color:#928374;font-style:italic;\"># to use a usb camera \n</span><span>  args</span><span style=\"color:#fe8019;\">=</span><span>(</span><span style=\"color:#d3869b;\">0</span><span>,), </span><span style=\"color:#928374;font-style:italic;\"># this can be used and the camera may have ID other than `0` so make sure to check that\n</span><span>\n</span></code></pre><p>Tuning the motors is essential because it directly impacts the robot's movement, responsiveness, and overall efficiency. Factors such as the size, power, and weight distribution of the robot, as well as the surface it operates on, can all influence how the motors should be configured.</p><p>In the <code>esp32.py</code> file:</p><pre style=\"background-color:#282828;\"><code><span>\n</span><span>  </span><span style=\"color:#928374;font-style:italic;\"># Tuning the motors\n</span><span>  </span><span style=\"color:#fabd2f;\">int </span><span>left_min_pwm_forward </span><span style=\"color:#fe8019;\">= </span><span style=\"color:#d3869b;\">110</span><span>;\n</span><span>  </span><span style=\"color:#fabd2f;\">int </span><span>left_min_pwm_backward </span><span style=\"color:#fe8019;\">= </span><span style=\"color:#d3869b;\">115</span><span>;\n</span><span>  </span><span style=\"color:#fabd2f;\">int </span><span>right_min_pwm_forward </span><span style=\"color:#fe8019;\">= </span><span style=\"color:#d3869b;\">110</span><span>;\n</span><span>  </span><span style=\"color:#fabd2f;\">int </span><span>right_min_pwm_backward </span><span style=\"color:#fe8019;\">= </span><span style=\"color:#d3869b;\">115</span><span>;\n</span><span>\n</span></code></pre><p>In the <code>main.py</code> file (tuning PID settings):</p><pre style=\"background-color:#282828;\"><code><span>\n</span><span>  robot_settings </span><span style=\"color:#fe8019;\">= </span><span>{\n</span><span>      </span><span style=\"color:#d3869b;\">6</span><span>: {  \n</span><span>          </span><span style=\"color:#928374;font-style:italic;\"># Robot ID 6\n</span><span>          </span><span style=\"color:#b8bb26;\">\"P_left\"</span><span>: </span><span style=\"color:#d3869b;\">0.8</span><span>,\n</span><span>          </span><span style=\"color:#b8bb26;\">\"P_right\"</span><span>: </span><span style=\"color:#d3869b;\">0.8</span><span>,\n</span><span>          </span><span style=\"color:#b8bb26;\">\"P_center\"</span><span>: </span><span style=\"color:#d3869b;\">0.4</span><span>,\n</span><span>          </span><span style=\"color:#b8bb26;\">\"I_left\"</span><span>: </span><span style=\"color:#d3869b;\">0.01</span><span>,\n</span><span>          </span><span style=\"color:#b8bb26;\">\"I_right\"</span><span>: </span><span style=\"color:#d3869b;\">0.01</span><span>,\n</span><span>          </span><span style=\"color:#b8bb26;\">\"I_center\"</span><span>: </span><span style=\"color:#d3869b;\">0.01</span><span>,\n</span><span>          </span><span style=\"color:#b8bb26;\">\"D_left\"</span><span>: </span><span style=\"color:#d3869b;\">0.001</span><span>,\n</span><span>          </span><span style=\"color:#b8bb26;\">\"D_right\"</span><span>: </span><span style=\"color:#d3869b;\">0.001</span><span>,\n</span><span>          </span><span style=\"color:#b8bb26;\">\"D_center\"</span><span>: </span><span style=\"color:#d3869b;\">0.001</span><span>,\n</span><span>          </span><span style=\"color:#b8bb26;\">\"backward_speed_left\"</span><span>: </span><span style=\"color:#d3869b;\">10</span><span>,\n</span><span>          </span><span style=\"color:#b8bb26;\">\"backward_speed_right\"</span><span>: </span><span style=\"color:#d3869b;\">10</span><span>,\n</span><span>          </span><span style=\"color:#b8bb26;\">\"left_prev_error\"</span><span>: </span><span style=\"color:#d3869b;\">0</span><span>,\n</span><span>          </span><span style=\"color:#b8bb26;\">\"right_prev_error\"</span><span>: </span><span style=\"color:#d3869b;\">0</span><span>,\n</span><span>          </span><span style=\"color:#b8bb26;\">\"center_prev_error\"</span><span>: </span><span style=\"color:#d3869b;\">0</span><span>,\n</span><span>          </span><span style=\"color:#b8bb26;\">\"dt\"</span><span>: </span><span style=\"color:#d3869b;\">0.3</span><span>,\n</span><span>      }\n</span><span>  }\n</span><span>\n</span></code></pre><h3>Making the bot:</h3><ol><li>Assemble the bot following the diagram below:</li></ol><p><img alt=\"PIN Diagram\" src=\"https://scientiac.space/images/manoid/diagram.png\" /></p><ol start=\"2\"><li>Then open the file inside the project directory on <code>etc/esp32/esp32.ino</code> on your Arduino IDE set up to work with esp32 and change the parameters to fit your environment.</li><li>And finally flash it!</li></ol><p><img alt=\"Bot\" src=\"https://scientiac.space/images/manoid/bot.png\" /></p><blockquote><p><em>You can test the bot manually by connecting to the mqtt server using an application (<em>like MyMQTT on android</em>) and sending values from <code>0</code> to <code>255</code> to the topics :<br /><code>/robot6_left_forward</code><br /><code>/robot6_left_backward</code><br /><code>/robot6_right_forward</code><br /><code>/robot6_right_backard</code><br /> where <code>0</code> being the wheels at no speed and <code>255</code> being the max speed</em></p></blockquote><h2>What is in the code?</h2><h3>The Functions, duh!</h3>Click to expand: The Functions<p>This list contains the functions involved in the robot, with each function's purpose:</p> <p><strong>1. <code>get_warped_frame(input_frame, marker_ids, PAD)</code></strong></p> <ul><li>Detects ArUco markers in the input frame.</li><li>Extracts the corners of specified markers.</li><li>Warps the frame to correct perspective if all specified markers are detected.</li><li>Returns the warped frame and marker corners.</li></ul><p><strong>2. <code>calculate_scale(corners, marker_physical_size_cm)</code></strong></p> <ul><li>Calculates the scale of the marker in pixels per centimeter.</li><li>Uses the distance between two corners of the marker.</li></ul><p><strong>3. <code>adjust_marker_corners(corners, offset_x_cm, offset_y_cm, adjust_width_cm, adjust_height_cm, marker_physical_size_cm)</code></strong></p> <ul><li>Adjusts the marker corners based on given offsets and size adjustments in centimeters.</li></ul><p><strong>4. <code>detect_aruco_markers(frame, aruco_dict_type)</code></strong></p> <ul><li>Detects ArUco markers in the frame.</li><li>Processes the detected markers and adjusts corners if necessary.</li><li>Returns the detected markers with their centers and corners.</li></ul><p><strong>5. <code>heuristic(a, b)</code></strong></p> <ul><li>Calculates the Manhattan distance between two points.</li><li>Used in pathfinding algorithms.</li></ul><p><strong>6. <code>astar(start, goal, obstacles, grid_size)</code></strong></p> <ul><li>Implements the A* algorithm to find the shortest path from start to goal.</li><li>Considers obstacles and returns the path if found.</li></ul><p><strong>7. <code>connect_mqtt()</code></strong></p> <ul><li>Connects to the MQTT broker to enable robot communication.</li></ul><p><strong>8. <code>send_mqtt_command(topic, command)</code></strong></p> <ul><li>Sends a command to the robot via MQTT.</li></ul><p><strong>9. <code>get_bot_position(bot_id, markers)</code></strong></p> <ul><li>Retrieves the current position of a robot based on its marker ID.</li></ul><p><strong>10. <code>calculate_distances(robot_corners, next_position)</code></strong></p> <ul><li>Calculates the distances from the robot's center and corners to the next position.</li></ul><p><strong>11. <code>move_towards_goal(robot_id, path, threshold)</code></strong></p> <ul><li>Moves the robot towards the goal following the given path using PID control.</li></ul><p><strong>12. <code>draw_lines_to_goal(frame, robot_corners, goal_position, color, thickness)</code></strong></p> <ul><li>Draws lines from the robot's corners and center to the goal position on the frame.</li></ul><p><strong>13. <code>draw_path(frame, path, color, thickness, grid_size)</code></strong></p> <ul><li>Draws the planned path on the frame.</li></ul><p><strong>14. <code>get_head_position(robot_id, markers)</code></strong></p> <ul><li>Returns the head position and corners of the robot based on its marker ID.</li></ul><p><strong>15. <code>get_waste_positions(markers, waste_id)</code></strong></p> <ul><li>Filters and returns the positions of a specific type of waste.</li></ul><p><strong>16. <code>fill_grid_cells_from_corners(corners, grid_size)</code></strong></p> <ul><li>Returns all grid cells covered by a rectangle defined by its corners.</li></ul><p><strong>17. <code>update_obstacles(markers, target_waste_ids, robot_head_pos)</code></strong></p> <ul><li>Updates the list of obstacles and finds the nearest waste position.</li></ul><p><strong>18. <code>convert_to_grid_coordinates(position, cell_size)</code></strong></p> <ul><li>Converts a position to grid coordinates based on the cell size.</li></ul><p><strong>19. <code>convert_obstacles_to_grid(obstacles, cell_size)</code></strong></p> <ul><li>Converts a set of positions to grid coordinates.</li></ul><p><strong>20. <code>convert_grid_to_actual(path, cell_size)</code></strong></p> <ul><li>Converts a path of grid coordinates back to actual coordinates.</li></ul><p><strong>21. <code>plan_path(start, goal, obstacles)</code></strong></p> <ul><li>Plans a path using the A* algorithm and returns it in actual coordinates.</li></ul><p><strong>22. <code>find_nearest_edge_midpoint_to_robot(robot_pos, marker_id, markers)</code></strong></p> <ul><li>Finds the nearest edge midpoint of a marker relative to the robot's position.</li></ul><p><strong>23. <code>pickup_waste(robot_id)</code></strong></p> <ul><li>Sends a command to the robot to pick up the waste.</li></ul><p><strong>24. <code>drop_off_waste(robot_id, waste_id)</code></strong></p> <ul><li>Sends a command to the robot to drop off the waste and marks it as processed.</li></ul><p><strong>25. <code>robot_control_loop(robot_id)</code></strong></p> <ul><li>Main control loop for the robot: <ul><li>Connects to MQTT.</li><li>Detects waste, navigates to it, picks it up, and drops it off.</li><li>Repeats the process continuously.</li></ul></li></ul><p><strong>26. <code>capture_and_update_shared_resources(url)</code></strong></p> <ul><li>Continuously captures video frames.</li><li>Detects markers and updates shared resources with the frame and markers.</li></ul><p><strong>27. <code>visualize_robot_behavior()</code></strong></p> <ul><li>Visualizes the robot's current behavior on the frame.</li><li>Draws the robot's position, planned path, obstacles, and goal on the frame.</li></ul><p><img alt=\"functions\" src=\"https://scientiac.space/images/manoid/functions.svg\" /></p><h2>Finally</h2><h3>Testing</h3><p>To test only the <code>main.py</code> file for it's pathfinding capabilities, you can run the <code>./pngstream.py</code> file in the <code>etc</code> directory and put <code>http://127.0.0.1:5000/video_feed</code> on the following placeholder in <code>main.py</code>:</p><pre style=\"background-color:#282828;\"><code><span>\n</span><span>    args</span><span style=\"color:#fe8019;\">=</span><span>(</span><span style=\"color:#b8bb26;\">\"http://Your_IP_Camera_feed_Address\"</span><span>,) </span><span style=\"color:#928374;font-style:italic;\"># this is almost at the end of the document\n</span><span>\n</span></code></pre><p>and then run <code>main.py</code>. This will open up a window with the png showing the detected path in the screen along with detecting all the ArUco markers. If only the markers are detected and the path doesn't show up, it can be assumed that the code isn't working corrctly.</p><blockquote><p><em>I suggest testing this way as soon as nix finishes setting the environment and keep testing the code like this to minimize the need to test it physically.</em></p></blockquote><h3>Troubleshooting Common Issues</h3><ul><li>Connection Problems: If the robot fails to connect to the MQTT broker, double-check your Wi-Fi credentials and ensure the broker's IP address is correct in both the ESP32 firmware and main.py. (The main.py script will print errors if something isn't properly connected.)</li><li>Movement Issues: If the robot's movements are erratic or it doesn't move as expected, recheck the motor connections and ensure the PWM values are correctly tuned in <code>main.py</code> and <code>esp32.ino</code>.</li><li>Marker Detection Failures: If the robot cannot detect ArUco markers, ensure the camera feed is clear and unobstructed. Adjust the camera's focus and lighting conditions to improve detection accuracy.\"</li></ul><h3>Possible Improvements</h3><ol><li>In my pathfinding algorithm, I don't search for the diagonal paths which lengthens the \"short path\" as I wanted the robot to face <code>the waste</code> or <code>the destination</code> from either sides of the square and not the corners.</li><li>Making swarm robots instead of using only one.</li><li>Making the code object-oriented.</li><li>Adding grippers to grab the waste instead of the 5-second delay and drop the waste on its destination.</li></ol><blockquote><p><em>We had added the functionalities of gripping and swarm navigation when using this bot on a Robotics Competition in Nepal called <code>Yantra Swarmanoid</code> but decided to remove it on this showcase, though the code to grab and drop the waste is still in there in 'main.py'.</em></p></blockquote>","published":"2024-06-12T00:00:00+00:00","published_ts":1718150400},"activity":{"type":"link"},"target":"https://scientiac.space/blog/esp-mosquitto/"}]}