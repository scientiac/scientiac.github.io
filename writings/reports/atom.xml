<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title>scientiac::syntropy - Reports</title>
    <subtitle>A Computer Engineering student who loves FOSS and is learning about privacy, the Internet and languages writing about the things he does.</subtitle>
    <link rel="self" type="application/atom+xml" href="https://scientiac.space/writings/reports/atom.xml"/>
    <link rel="alternate" type="text/html" href="https://scientiac.space"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2025-09-30T00:00:00+00:00</updated>
    <id>https://scientiac.space/writings/reports/atom.xml</id>
    <entry xml:lang="en">
        <title>Almost splitting a Keyboard in Half</title>
        <published>2025-09-30T00:00:00+00:00</published>
        <updated>2025-09-30T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              scientiac
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://scientiac.space/blog/diy-split-keyboard/"/>
        <id>https://scientiac.space/blog/diy-split-keyboard/</id>
        
        <content type="html" xml:base="https://scientiac.space/blog/diy-split-keyboard/">&lt;p&gt;&lt;em&gt;Yeah! I keep doing stupid things.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The idea of remapping keys isn&#x27;t new, be it for typing in a different language or to make the escape key more ergonomic for vim users.
I mapped my &lt;kbd&gt;escape&lt;&#x2F;kbd&gt; key to &lt;kbd&gt;`&lt;&#x2F;kbd&gt; and &lt;kbd&gt;caps-lock&lt;&#x2F;kbd&gt; key to &lt;kbd&gt;escape&lt;&#x2F;kbd&gt; when I bought my 65% keyboard.
It was because I had to use some weird function keybind just to type a &lt;kbd&gt;~&lt;&#x2F;kbd&gt;. Then I realised my laptop key got remapped too, but I
just went ahead with it. That is when I used this software called &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rvaiya&#x2F;keyd&quot;&gt;keyd&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Fast forward to today and rewind to a month back, I was bored out of my mind and was fidgeting with my keyboard when I popped one of the keys
out of it. And right then I looked at the keys and wondered if I could make a minimal split keyboard out of it using &lt;code&gt;keyd&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I had watched many videos about split keyboards, and one was even in my &lt;a href=&quot;https:&#x2F;&#x2F;boardsource.xyz&#x2F;products&#x2F;unicorne-lp-aluminum-corne-case&quot;&gt;wish&lt;&#x2F;a&gt;list for a long time. So, I wondered if I was gonna invest in a keyboard that is going to shape my typing muscle memory, I should at least give it a try beforehand.&lt;&#x2F;p&gt;
&lt;p&gt;Now that I started writing about it, I don&#x27;t think it was that big a deal. It only took too much of my time to configure it. First I tried the &lt;code&gt;ferris sweep&lt;&#x2F;code&gt; layout which was too much of a sacrifice, then I tried &lt;code&gt;corne&lt;&#x2F;code&gt; and finally decided on the &lt;code&gt;5 column corne&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;before-operation&quot;&gt;Before Operation:&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;diy-split-keyboard&#x2F;before.png&quot; alt=&quot;keyboard-before&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;after-operation&quot;&gt;After Operation:&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;diy-split-keyboard&#x2F;after.jpeg&quot; alt=&quot;keyboard-after&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;details&gt;
&lt;summary&gt;Here is the &lt;code&gt;keyd&lt;&#x2F;code&gt; configuration:&lt;&#x2F;summary&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# corne-36.conf
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# keyboard id to enable [wired, bluetooth and 2.4ghz]
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;ids&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;5566:0008
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;3151:6001
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;1235:aa22
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# LEFT HAND
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# ROW 1
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Press &amp;quot;q&amp;quot; to write q
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;1 = q
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Press &amp;quot;w&amp;quot; to write w
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;2 = w  
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Press &amp;quot;e&amp;quot; to write e
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;3 = e
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Press &amp;quot;r&amp;quot; to write r
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;4 = r
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Press &amp;quot;t&amp;quot; to write t
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;5 = t
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# ------------------------------------------ #
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# LEFT HAND
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# ROW 2
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Press &amp;quot;a&amp;quot; to write a
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;q = a
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Press &amp;quot;s&amp;quot; to write s
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;w = s
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Press &amp;quot;d&amp;quot; to write d
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;e = d
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Press &amp;quot;f&amp;quot; to write f
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;r = f
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Press &amp;quot;g&amp;quot; to write g
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;t = g
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# ------------------------------------------ #
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# LEFT HAND
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# ROW 3
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Press &amp;quot;z&amp;quot; to write z
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;a = z
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Press &amp;quot;x&amp;quot; to write x
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;s = x
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Press &amp;quot;c&amp;quot; to write c
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;d = c
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Press &amp;quot;v&amp;quot; to write v
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;f = v
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Press &amp;quot;b&amp;quot; to write b
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;g = b
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# ------------------------------------------ #
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# LEFT HAND
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# BOTTOM ROW - Special keys
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Press &amp;quot;down-arrow&amp;quot; for leftmeta, hold &amp;quot;down-arrow&amp;quot; for meta
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;x = overload(meta, leftmeta)
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Press &amp;quot;alt&amp;quot; for space, hold &amp;quot;alt&amp;quot; for navigation
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;c = overload(navigation, space)
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Press &amp;quot;up-arrow&amp;quot; for esc, hold &amp;quot;up-arrow&amp;quot; for control
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;v = overload(control, esc)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# ------------------------------------------ #
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# ------------------------------------------ #
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# ------------------------------------------ #
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# RIGHT HAND
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# ROW 1
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Press &amp;quot;y&amp;quot; to write y
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;8 = y
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Press &amp;quot;u&amp;quot; to write u
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;9 = u
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Press &amp;quot;i&amp;quot; to write i
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;0 = i
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Press &amp;quot;o&amp;quot; to write o
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;minus = o
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Press &amp;quot;p&amp;quot; to write p
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;equal = p
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# ------------------------------------------ #
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# RIGHT HAND
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# ROW 2
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Press &amp;quot;h&amp;quot; to write h
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;u = h
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Press &amp;quot;j&amp;quot; to write j
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;i = j
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Press &amp;quot;k&amp;quot; to write k
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;o = k
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Press &amp;quot;l&amp;quot; to write l
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;p = l
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Press &amp;quot;;&amp;quot; to write semicolon
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;leftbrace = semicolon
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# ------------------------------------------ #
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# RIGHT HAND
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# ROW 3
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Press &amp;quot;n&amp;quot; to write n
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;j = n
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Press &amp;quot;m&amp;quot; to write m
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;k = m
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Press &amp;quot;,&amp;quot; to write comma
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;l = comma
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Press &amp;quot;.&amp;quot; to write dot, hold &amp;quot;.&amp;quot; for control
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;semicolon = dot
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Press &amp;quot;&#x2F;&amp;quot; to write slash
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;apostrophe = slash
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# ------------------------------------------ #
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# RIGHT HAND
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# BOTTOM ROW - Special keys
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Press &amp;quot;-&amp;gt;&amp;quot; for enter, hold &amp;quot;-&amp;gt;&amp;quot; for alt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;m = overload(alt, enter)
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Press &amp;quot;del&amp;quot; for backspace, hold &amp;quot;del&amp;quot; for symbols
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;comma = overload(symbols, backspace)
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Press &amp;quot;&amp;lt;-&amp;quot; for tab, hold &amp;quot;&amp;lt;-&amp;quot; for shift
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;dot = overload(shift, tab)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# ------------------------------------------ #
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# ALL UNUSED KEYS FROM THE KEYBOARD
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;tab = noop
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;capslock = noop
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;backspace = noop
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;backslash = noop
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;rightbrace = noop
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;esc = noop
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;enter = noop
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;6 = noop
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;7 = noop
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;y = noop
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;leftshift = noop
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;z = noop
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;b = noop
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;h = noop
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;slash = noop
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;rightshift = noop
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;leftcontrol = noop
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;leftalt = noop
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;space = noop
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;rightalt = noop
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;rightcontrol = noop
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;leftmeta = noop
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;rightmeta = noop
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;grave = noop
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;f1 = noop
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;f2 = noop
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;f3 = noop
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;f4 = noop
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;f5 = noop
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;f6 = noop
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;f7 = noop
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;f8 = noop
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;f9 = noop
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;f10 = noop
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;f11 = noop
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;f12 = noop
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;up = noop
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;down = noop  
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;left = noop
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;right = noop
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;home = noop
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;end = noop
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;pageup = noop
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;pagedown = noop
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;insert = noop
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;delete = noop
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;kp0 = noop
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;kp1 = noop
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;kp2 = noop
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;kp3 = noop
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;kp4 = noop
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;kp5 = noop
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;kp6 = noop
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;kp7 = noop
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;kp8 = noop
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;kp9 = noop
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;kpdot = noop
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;kpenter = noop
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;kpplus = noop
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;kpminus = noop
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;kpasterisk = noop
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;kpslash = noop
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# ------------------------------------------ #
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# ------------------------------------------ #
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# ------------------------------------------ #
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;#  [ 1:q ] [ 2:w ] [ 3:e ] [ 4:r ] [ 5:t ]                    [ 8:y ] [ 9:u ] [ 0:i ] [ -:o ] [ =:p ]
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;#   [ q:a ] [ w:s ] [ e:d ] [ r:f ] [ t:g ]              	[ i:h ] [ o:j ] [ p:k ] [ [:l ] [ ]:; ]
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;#    [ a:z ] [ s:x ] [ d:c ] [ f:v ] [ g:b ]          	     [ j:n ] [ k:m ] [ l:, ] [ ;:. ] [ &amp;#39;:&#x2F; ]
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;#          [ x:meta ] [ c:nav&#x2F;space ] [ v:ctrl&#x2F;esc ]    	[ m:alt&#x2F;return ] [ ,:sym&#x2F;backspace ] [ .:shift&#x2F;tab ]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# ------------------------------------------ #
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# ------------------------------------------ #
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# ------------------------------------------ #
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;symbols&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# LEFT HAND
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# ROW 1
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Hold &amp;quot;del&amp;quot; and press &amp;quot;q&amp;quot; for &amp;quot;!&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;1 = S-1
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Hold &amp;quot;del&amp;quot; and press &amp;quot;w&amp;quot; for &amp;quot;@&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;2 = S-2
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Hold &amp;quot;del&amp;quot; and press &amp;quot;e&amp;quot; for &amp;quot;#&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;3 = S-3
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Hold &amp;quot;del&amp;quot; and press &amp;quot;r&amp;quot; for &amp;quot;$&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;4 = S-4
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Hold &amp;quot;del&amp;quot; and press &amp;quot;t&amp;quot; for &amp;quot;%&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;5 = S-5
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# ------------------------------------------ #
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# LEFT HAND
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# ROW 2
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Hold &amp;quot;del&amp;quot; and press &amp;quot;a&amp;quot; for &amp;quot;1&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;q = 1
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Hold &amp;quot;del&amp;quot; and press &amp;quot;s&amp;quot; for &amp;quot;2&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;w = 2
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Hold &amp;quot;del&amp;quot; and press &amp;quot;d&amp;quot; for &amp;quot;3&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;e = 3
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Hold &amp;quot;del&amp;quot; and press &amp;quot;f&amp;quot; for &amp;quot;4&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;r = 4
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Hold &amp;quot;del&amp;quot; and press &amp;quot;g&amp;quot; for &amp;quot;5&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;t = 5
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# ------------------------------------------ #
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# LEFT HAND
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# ROW 3
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;capslock = noop
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Hold &amp;quot;del&amp;quot; and press &amp;quot;z&amp;quot; for &amp;quot;6&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;a = 6
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Hold &amp;quot;del&amp;quot; and press &amp;quot;x&amp;quot; for &amp;quot;7&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;s = 7
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Hold &amp;quot;del&amp;quot; and press &amp;quot;c&amp;quot; for &amp;quot;8&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;d = 8
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Hold &amp;quot;del&amp;quot; and press &amp;quot;v&amp;quot; for &amp;quot;9&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;f = 9
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Hold &amp;quot;del&amp;quot; and press &amp;quot;b&amp;quot; for &amp;quot;0&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;g = 0
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# LEFT HAND
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# BOTTOM ROW - Special keys
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;x = noop
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;c = backslash
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;v = &amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# ------------------------------------------ #
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# RIGHT HAND
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# ROW 1
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Hold &amp;quot;del&amp;quot; and press &amp;quot;y&amp;quot; for &amp;quot;^&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;8 = S-6
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Hold &amp;quot;del&amp;quot; and press &amp;quot;u&amp;quot; for &amp;quot;&amp;amp;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;9 = S-7
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Hold &amp;quot;del&amp;quot; and press &amp;quot;i&amp;quot; for &amp;quot;*&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;0 = S-8
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Hold &amp;quot;del&amp;quot; and press &amp;quot;o&amp;quot; for &amp;quot;(&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;minus = S-9
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Hold &amp;quot;del&amp;quot; and press &amp;quot;p&amp;quot; for &amp;quot;)&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;equal = S-0
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# ------------------------------------------ #
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# RIGHT HAND
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# ROW 2
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Hold &amp;quot;del&amp;quot; and press &amp;quot;h&amp;quot; for &amp;quot;_&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;u = minus
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Hold &amp;quot;del&amp;quot; and press &amp;quot;j&amp;quot; for &amp;quot;=&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;i = equal
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Hold &amp;quot;del&amp;quot; and press &amp;quot;k&amp;quot; for &amp;quot;`&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;o = grave
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Hold &amp;quot;del&amp;quot; and press &amp;quot;l&amp;quot; for &amp;quot;[&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;p = leftbrace
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Hold &amp;quot;del&amp;quot; and press &amp;quot;;&amp;quot; for &amp;quot;]&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;leftbrace = rightbrace
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# ------------------------------------------ #
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# RIGHT HAND
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# ROW 3
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Hold &amp;quot;del&amp;quot; and press &amp;quot;n&amp;quot; for &amp;quot;_&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;j = S-minus
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Hold &amp;quot;del&amp;quot; and press &amp;quot;m&amp;quot; for &amp;quot;+&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;k = S-equal
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Hold &amp;quot;del&amp;quot; and press &amp;quot;,&amp;quot; for &amp;quot;~&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;l = S-grave
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Hold &amp;quot;del&amp;quot; and press &amp;quot;.&amp;quot; for &amp;quot;{&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;semicolon = S-leftbrace
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Hold &amp;quot;del&amp;quot; and press &amp;quot;&#x2F;&amp;quot; for &amp;quot;}&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;apostrophe = S-rightbrace
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# ------------------------------------------ #
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# RIGHT HAND
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# BOTTOM ROW - Special keys
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;m = backspace
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;comma = noop
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;dot = rightshift
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# ------------------------------------------ #
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# ------------------------------------------ #
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# ------------------------------------------ #
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;navigation&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# LEFT HAND
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# ROW 1
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Hold &amp;quot;alt&amp;quot; and press &amp;quot;q&amp;quot; for &amp;quot;f1&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;1 = f1
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Hold &amp;quot;alt&amp;quot; and press &amp;quot;w&amp;quot; for &amp;quot;f2&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;2 = f2
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Hold &amp;quot;alt&amp;quot; and press &amp;quot;e&amp;quot; for &amp;quot;f3&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;3 = f3
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Hold &amp;quot;alt&amp;quot; and press &amp;quot;r&amp;quot; for &amp;quot;f4&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;4 = f4
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Hold &amp;quot;alt&amp;quot; and press &amp;quot;t&amp;quot; for &amp;quot;f5&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;5 = f5
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# ------------------------------------------ #
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# LEFT HAND
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# ROW 2
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Hold &amp;quot;alt&amp;quot; and press &amp;quot;a&amp;quot; for &amp;quot;f6&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;q = f6
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Hold &amp;quot;alt&amp;quot; and press &amp;quot;s&amp;quot; for &amp;quot;f7&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;w = f7
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Hold &amp;quot;alt&amp;quot; and press &amp;quot;d&amp;quot; for &amp;quot;f8&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;e = f8
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Hold &amp;quot;alt&amp;quot; and press &amp;quot;f&amp;quot; for &amp;quot;f9&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;r = f9
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Hold &amp;quot;alt&amp;quot; and press &amp;quot;g&amp;quot; for &amp;quot;f10&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;t = f10
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# ------------------------------------------ #
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# LEFT HAND
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# ROW 3
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Hold &amp;quot;alt&amp;quot; and press &amp;quot;z&amp;quot; for &amp;quot;f11&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;a = f11
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Hold &amp;quot;alt&amp;quot; and press &amp;quot;x&amp;quot; for &amp;quot;f12&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;s = f12
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;d = noop
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;f = noop
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;g = noop
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# ------------------------------------------ #
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# RIGHT HAND
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# ROW 1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;8 = noop
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Hold &amp;quot;alt&amp;quot; and press &amp;quot;u&amp;quot; for &amp;quot;tab&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;9 = tab
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Hold &amp;quot;alt&amp;quot; and press &amp;quot;i&amp;quot; for &amp;quot;pageup&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;0 = pageup
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Hold &amp;quot;alt&amp;quot; and press &amp;quot;o&amp;quot; for &amp;quot;pagedown&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;minus = pagedown
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Hold &amp;quot;alt&amp;quot; and press &amp;quot;p&amp;quot; for &amp;quot;print&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;equal = print
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# ------------------------------------------ #
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# RIGHT HAND
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# ROW 2
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Hold &amp;quot;alt&amp;quot; and press &amp;quot;h&amp;quot; for &amp;quot;left&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;u = left
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Hold &amp;quot;alt&amp;quot; and press &amp;quot;j&amp;quot; for &amp;quot;down&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;i = down
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Hold &amp;quot;alt&amp;quot; and press &amp;quot;k&amp;quot; for &amp;quot;up&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;o = up
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Hold &amp;quot;alt&amp;quot; and press &amp;quot;l&amp;quot; for &amp;quot;right&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;p = right
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;leftbrace = noop
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# ------------------------------------------ #
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# RIGHT HAND
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# ROW 3
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Hold &amp;quot;alt&amp;quot; and press &amp;quot;n&amp;quot; for &amp;quot;home&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;j = home
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Hold &amp;quot;alt&amp;quot; and press &amp;quot;m&amp;quot; for &amp;quot;end&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;k = end
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;l = noop
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;semicolon = noop
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;apostrophe = noop
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# ------------------------------------------ #
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# RIGHT HAND
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# BOTTOM ROW - Special keys
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;m = noop
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;comma = delete
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;dot = noop
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;details&gt;
&lt;p&gt;I even vibe coded a &lt;a href=&quot;&#x2F;images&#x2F;diy-split-keyboard&#x2F;corne-36.html&quot;&gt;layout visualiser&lt;&#x2F;a&gt; to remember the keybinds.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;happy-ending&quot;&gt;Happy Ending?&lt;&#x2F;h3&gt;
&lt;p&gt;Well, I could just lie and say that I have increased my productivity by 200% but, that is far from the reality. After I had fun changing the layout, I am just happy with the comfort of my laptop keyboard and have not used the split keyboard at all. I do use it sometimes but, I am so slow on it that I immidiately fall back to the laptop. It is obvious, it takes time to learn a split layout but, I am just not investing my time on it. Nevertheless, &lt;strong&gt;it was so damn fun while I configured it&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Projects like &lt;code&gt;keyd&lt;&#x2F;code&gt; just keep the spirit of Linux alive.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Static Site Webmentions</title>
        <published>2025-08-31T00:00:00+00:00</published>
        <updated>2025-08-31T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              scientiac
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://scientiac.space/blog/webmentions/"/>
        <id>https://scientiac.space/blog/webmentions/</id>
        
        <content type="html" xml:base="https://scientiac.space/blog/webmentions/">&lt;p&gt;I had set up Webmentions on my static site &lt;a href=&quot;&#x2F;syndications&#x2F;posse-2024-11-05&#x2F;&quot;&gt;a while back&lt;&#x2F;a&gt;. It was because I really like the concept of a completely custom yet static social media where it&#x27;s not instant but it&#x27;s regular communication. But, the drawback of any kind of unique and DIY technology is not having people that actually use it.&lt;&#x2F;p&gt;
&lt;p&gt;Ironically, after the setup, I only have received Webmentions from myself during testing (&lt;em&gt;I am not counting the mastodon likes that propagated through &lt;a href=&quot;https:&#x2F;&#x2F;fed.brid.gy&#x2F;web&#x2F;scientiac.space&quot;&gt;Bridgy Fed&lt;&#x2F;a&gt;)&lt;&#x2F;em&gt;. I am still sceptical about Bridgy Fed because It isn&#x27;t what I wanted Webmentions to be, I didn&#x27;t want any connections to a social media but I wanted to test the workings so I connected it.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;how-i-do-it&quot;&gt;How I Do It&lt;&#x2F;h2&gt;
&lt;p&gt;My blog is a static site and being static comes with the cost of not being able to continuously listen to incoming messages. So, Webmentions don&#x27;t really work on a static site. At least that&#x27;s what I thought at first, then I found out about &lt;a href=&quot;https:&#x2F;&#x2F;webmention.io&#x2F;&quot;&gt;webmention.io&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;It&#x27;s sort of like a retrofitted static site to support Webmentions.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;components&quot;&gt;Components&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;A Static Site Generator &lt;a href=&quot;https:&#x2F;&#x2F;www.getzola.org&#x2F;&quot;&gt;www.getzola.org&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Indieweb Compatibility &lt;a href=&quot;https:&#x2F;&#x2F;indiewebify.me&#x2F;&quot;&gt;indiewebify.me&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Send webmentions &lt;a href=&quot;https:&#x2F;&#x2F;webmention.app&#x2F;&quot;&gt;webmention.app&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Receive Webmentions &lt;a href=&quot;https:&#x2F;&#x2F;webmention.io&#x2F;&quot;&gt;webmention.io&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Render Webmentions &lt;a href=&quot;https:&#x2F;&#x2F;keats.github.io&#x2F;tera&#x2F;&quot;&gt;keats.github.io&#x2F;tera&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Runner &lt;a href=&quot;https:&#x2F;&#x2F;docs.github.com&#x2F;en&#x2F;actions&quot;&gt;GitHub actions&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;a-static-site-generator&quot;&gt;A Static Site Generator&lt;&#x2F;h4&gt;
&lt;p&gt;I am using &lt;code&gt;zola&lt;&#x2F;code&gt; as my static site generator and I love it. The comfort of just writing in &lt;code&gt;markdown&lt;&#x2F;code&gt; and letting &lt;code&gt;zola&lt;&#x2F;code&gt; do the heavy lifting to generate feeds is awesome. Generating an Atom&#x2F;RSS feed is a must. This is needed by webmention.app to send webmentions by reading all your posts.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;indieweb-compatibility&quot;&gt;Indieweb Compatibility&lt;&#x2F;h4&gt;
&lt;p&gt;To make an Indieweb compatible static site you need to pass these tests from &lt;a href=&quot;https:&#x2F;&#x2F;indiewebify.me&#x2F;&quot;&gt;indiewebify.me&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Web Sign In - This helps you sign in to indieweb services with your domain. &lt;em&gt;You must have your own registered domain name.&lt;&#x2F;em&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;h-card&lt;&#x2F;code&gt; and &lt;code&gt;h-entry&lt;&#x2F;code&gt; classes on homepage as well as on the &quot;post&quot; page.&lt;&#x2F;li&gt;
&lt;li&gt;Ability to send Webmentions.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h4 id=&quot;sending-webmentions&quot;&gt;Sending Webmentions&lt;&#x2F;h4&gt;
&lt;p&gt;I use my generated Atom feed and webmention.app &lt;a href=&quot;https:&#x2F;&#x2F;webmention.app&#x2F;docs#using-the-command-line&quot;&gt;CLI&lt;&#x2F;a&gt; to send Webmentions.
It is as simple as running:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;npx webmention https:&#x2F;&#x2F;scientiac.space&#x2F;atom.xml --limit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;0 --send
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;receiving-webmentions&quot;&gt;Receiving Webmentions&lt;&#x2F;h4&gt;
&lt;p&gt;To receive Webmentions you need a perpetual listening server and the service is provided by &lt;a href=&quot;https:&#x2F;&#x2F;webmention.io&#x2F;&quot;&gt;webmention.io&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Sign into webmention.io with your domain. It will use &lt;a href=&quot;https:&#x2F;&#x2F;indielogin.com&#x2F;&quot;&gt;indielogin.com&lt;&#x2F;a&gt;. This requires you to have at least an email address on your h-card.&lt;&#x2F;li&gt;
&lt;li&gt;Go to &lt;code&gt;sites&lt;&#x2F;code&gt; and in the table click on &lt;code&gt;Get Setup Code&lt;&#x2F;code&gt; which will give you a tag to put on your HTML template header.&lt;&#x2F;li&gt;
&lt;li&gt;Test that you actually can receive Webmentions by mentioning yourself in a site and running the above command. It should show up in the dashboard of &lt;code&gt;webmention.io&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h4 id=&quot;render-webmentions&quot;&gt;Render Webmentions&lt;&#x2F;h4&gt;
&lt;p&gt;You can now fetch the json feed of the Webmentions you have received in webmention.io using the following command and replacing the &lt;code&gt;${WEBMENTION_TOKEN}&lt;&#x2F;code&gt; with your own token.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;curl -s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;https:&#x2F;&#x2F;webmention.io&#x2F;api&#x2F;mentions.json?token=${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;WEBMENTION_TOKEN&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;}&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt; -o webmentions.json
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This json file can be used to render the Webmentions on your website using your static site generator&#x27;s feature to read json files.&lt;&#x2F;p&gt;
&lt;p&gt;I made and activity page in zola where all the webmention activities are listed.&lt;&#x2F;p&gt;
&lt;details&gt;
&lt;summary&gt;Zola Template HTML&lt;&#x2F;summary&gt;
&lt;p&gt;This is located at &lt;code&gt;templates&#x2F;activity.html&lt;&#x2F;code&gt; and used at &lt;code&gt;content&#x2F;activity&#x2F;_index.md&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;templates&#x2F;activity.html&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;{% extends &amp;quot;base.html&amp;quot; %}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;{% block content %}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;class=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;section&lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;{% set data = load_data(path=&amp;quot;webmentions.json&amp;quot;, format=&amp;quot;json&amp;quot;) %}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;class=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;activity-box&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;{% for links in data.links %}
&lt;&#x2F;span&gt;&lt;span&gt;    {% set trimmed_path = links.target | trim_start_matches(pat=&amp;quot;https:&#x2F;&#x2F;&amp;quot; ~ config.extra.url ~ &amp;quot;&#x2F;&amp;quot;) | trim_end_matches(pat=&amp;quot;&#x2F;&amp;quot;) %}
&lt;&#x2F;span&gt;&lt;span&gt;    {% set relative_path = trimmed_path ~ &amp;quot;.md&amp;quot; %}
&lt;&#x2F;span&gt;&lt;span&gt;    {% set target_page = get_page(path=relative_path) %}
&lt;&#x2F;span&gt;&lt;span&gt;    {% if not links.source is starting_with(&amp;quot;https:&#x2F;&#x2F;&amp;quot; ~ config.extra.url) %}
&lt;&#x2F;span&gt;&lt;span&gt;        {% if links.activity.type == &amp;quot;like&amp;quot; %}
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;class=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;mention-profile like&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;code&lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;href=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;{{ links.source }}&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;{{ links.data.author.name }}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; liked &lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;href=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;{{ links.target }}&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;{{ target_page.title }}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;code&lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        {% endif %}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        {% if links.activity.type == &amp;quot;link&amp;quot; %}
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;class=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;mention-profile link&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;code&lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;href=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;{{ links.source }}&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;{{ links.data.author.name }}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; mentioned &lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;href=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;{{ links.target }}&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;{{ target_page.title }}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;code&lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        {% endif %}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        {% if links.activity.type == &amp;quot;reply&amp;quot; %}
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;class=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;mention-profile reply&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;code&lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;href=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;{{ links.source }}&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;{{ links.data.author.name }}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; replied to &lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;href=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;{{ links.target }}&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;{{ target_page.title }}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;code&lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        {% endif %}
&lt;&#x2F;span&gt;&lt;span&gt;    {% endif %}
&lt;&#x2F;span&gt;&lt;span&gt;{% endfor %}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;{% endblock content %}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;content&#x2F;activity&#x2F;_index.md&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;md&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-md &quot;&gt;&lt;code class=&quot;language-md&quot; data-lang=&quot;md&quot;&gt;&lt;span&gt;+++
&lt;&#x2F;span&gt;&lt;span&gt;template = &amp;quot;activity.html&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;+++
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;details&gt;
&lt;p&gt;Webmentions are rendered by zola utilizing the &lt;code&gt;load_data&lt;&#x2F;code&gt; function of tera templating engine. The fetched &lt;code&gt;webmention.json&lt;&#x2F;code&gt; file is parsed and formatted. [&lt;em&gt;Can be seen in &lt;code&gt;activity.html&lt;&#x2F;code&gt; in the above template.&lt;&#x2F;em&gt;]&lt;&#x2F;p&gt;
&lt;h4 id=&quot;runner&quot;&gt;Runner&lt;&#x2F;h4&gt;
&lt;p&gt;To rebuild the site by fetching new Webmentions we will need a runner that does the process repeatedly in said amount of time. This is where GitHub actions come in. I have three workflows &lt;code&gt;send-webmentions.yaml&lt;&#x2F;code&gt;, &lt;code&gt;zola.yml&lt;&#x2F;code&gt; and &lt;code&gt;fetch-webmentions.yaml&lt;&#x2F;code&gt; which as the name says, sends Webmentions from the site, builds the site using zola and fetches received Webmentions from &lt;code&gt;webmention.io&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;For fetching I have saved my webmention.app api key as a secret in GitHub and use that in the workflow file.&lt;&#x2F;p&gt;
&lt;p&gt;First put your token form webmention.io in &lt;code&gt;settings &amp;gt; security &amp;gt; secrets and variables &amp;gt; actions &amp;gt; new repository secret&lt;&#x2F;code&gt; of your GitHub repo with the name &lt;code&gt;WEBMENTION_TOKEN&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Then, the workflow files should be put in place.&lt;&#x2F;p&gt;
&lt;details&gt;
&lt;summary&gt;Workflow Files&lt;&#x2F;summary&gt;
&lt;p&gt;This is located at &lt;code&gt;.github&#x2F;workflows&#x2F;&lt;&#x2F;code&gt; from the root of your repository.&lt;&#x2F;p&gt;
&lt;p&gt;First workflow fetches new mentions every 30 minutes.&lt;br &#x2F;&gt;
&lt;code&gt;fetch-webmentions.yml&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yml&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-yml &quot;&gt;&lt;code class=&quot;language-yml&quot; data-lang=&quot;yml&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;Fetch Webmentions
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;on&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;branches&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;main
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;schedule&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;cron&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;#39;*&#x2F;30 * * * *&amp;#39;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Runs every 30 minutes
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;workflow_dispatch&lt;&#x2F;span&gt;&lt;span&gt;:  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Allows manual triggering of the workflow if needed
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;jobs&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;fetch_webmentions&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;runs-on&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;ubuntu-latest
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;steps&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      - &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;Checkout Repository
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;uses&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;actions&#x2F;checkout@v4
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;      - &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;Fetch Webmentions
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;env&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;WEBMENTION_TOKEN&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;${{ secrets.WEBMENTION_TOKEN }}
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;|
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;          mkdir -p static&#x2F;webmention
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;          # Fetch webmentions and save (overwrite) to a single file
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;          curl -s &amp;quot;https:&#x2F;&#x2F;webmention.io&#x2F;api&#x2F;mentions.json?token=${WEBMENTION_TOKEN}&amp;quot; -o static&#x2F;webmentions.json
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span&gt;      - &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;Commit and Push Webmentions
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;|
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;          git config --global user.name &amp;quot;github-actions[bot]&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;          git config --global user.email &amp;quot;github-actions[bot]@users.noreply.github.com&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;          git add static&#x2F;webmentions.json
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;          git commit -m &amp;quot;Update webmentions&amp;quot; || echo &amp;quot;No changes to commit&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;          # Pull latest changes from main with rebase to avoid conflicts
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;          git pull --rebase origin main
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;          # Now push the updated branch
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;          git push
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Second workflow builds the site from the source after fetching the Webmentions.&lt;br &#x2F;&gt;
&lt;code&gt;zola.yml&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yml&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-yml &quot;&gt;&lt;code class=&quot;language-yml&quot; data-lang=&quot;yml&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;Zola on GitHub Pages
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;on&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;workflow_run&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;workflows&lt;&#x2F;span&gt;&lt;span&gt;: [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Fetch Webmentions&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;types&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;completed
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;jobs&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;Publish site
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;runs-on&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;ubuntu-latest
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;steps&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;Checkout main
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;uses&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;actions&#x2F;checkout@v4
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;Build and deploy
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;uses&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;shalzz&#x2F;zola-deploy-action@v0.19.2
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;env&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;GITHUB_TOKEN&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;${{ secrets.GITHUB_TOKEN }}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Third workflow sends Webmentions from the detected links in the newly generated &lt;code&gt;atom.xml&lt;&#x2F;code&gt;.&lt;br &#x2F;&gt;
&lt;code&gt;send-webmentions.yml&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yml&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-yml &quot;&gt;&lt;code class=&quot;language-yml&quot; data-lang=&quot;yml&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;Send Webmentions
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;on&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;workflow_run&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;workflows&lt;&#x2F;span&gt;&lt;span&gt;: [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Zola on GitHub Pages&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;types&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;completed
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;jobs&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;send_webmentions&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;Send Webmentions with Delay
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;runs-on&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;ubuntu-latest
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;steps&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      - &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;Checkout Repository
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;uses&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;actions&#x2F;checkout@v4
&lt;&#x2F;span&gt;&lt;span&gt;        
&lt;&#x2F;span&gt;&lt;span&gt;      - &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;Wait for Delay
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;sleep 60  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Waits for 1 minute (60 seconds) before running the next steps
&lt;&#x2F;span&gt;&lt;span&gt;        
&lt;&#x2F;span&gt;&lt;span&gt;      - &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;Read Site URL from CNAME
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;get_url
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;|
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;          SITE_URL=$(cat static&#x2F;CNAME)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;          echo &amp;quot;site_url=$SITE_URL&amp;quot; &amp;gt;&amp;gt; $GITHUB_OUTPUT
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;        
&lt;&#x2F;span&gt;&lt;span&gt;      - &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;Install Webmention Package
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;npm install @remy&#x2F;webmention
&lt;&#x2F;span&gt;&lt;span&gt;        
&lt;&#x2F;span&gt;&lt;span&gt;      - &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;Send Webmentions
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;npx webmention https:&#x2F;&#x2F;${{ steps.get_url.outputs.site_url }}&#x2F;atom.xml --limit=0 --send
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;details&gt;
&lt;h2 id=&quot;sending-webmentions-1&quot;&gt;Sending Webmentions&lt;&#x2F;h2&gt;
&lt;p&gt;In order to send Webmentions, the content should be formatted accordingly. In general I like to utilize three activities to send Webmentions.
[&lt;em&gt;It is preferred to only use one activity for one mention.&lt;&#x2F;em&gt;]&lt;&#x2F;p&gt;
&lt;h3 id=&quot;mention&quot;&gt;Mention&lt;&#x2F;h3&gt;
&lt;p&gt;One can mention a site using webmention by simply putting the link to the page being mentioned.
The site will get the webmention if it supports it.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;md&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-md &quot;&gt;&lt;code class=&quot;language-md&quot; data-lang=&quot;md&quot;&gt;&lt;span&gt;[Void Bed](https:&#x2F;&#x2F;flux.carboxi.de&#x2F;void-bed&#x2F;) by flux.
&lt;&#x2F;span&gt;&lt;span&gt;or
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;href=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;https:&#x2F;&#x2F;flux.carboxi.de&#x2F;void-bed&#x2F;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;Void Bed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; by flux
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;like&quot;&gt;Like&lt;&#x2F;h3&gt;
&lt;p&gt;One can like a post using webmention by formatting the link as follows:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;md&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-md &quot;&gt;&lt;code class=&quot;language-md&quot; data-lang=&quot;md&quot;&gt;&lt;span&gt;I like how flux talks about his bed in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;class=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;u-like-of&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;href=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;https:&#x2F;&#x2F;flux.carboxi.de&#x2F;void-bed&#x2F;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;Void Bed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I like how flux talks about his bed in &lt;a class=&quot;u-like-of&quot; href=&quot;https:&#x2F;&#x2F;flux.carboxi.de&#x2F;void-bed&#x2F;&quot;&gt;Void Bed&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;reply&quot;&gt;Reply&lt;&#x2F;h3&gt;
&lt;p&gt;One can reply to a post by formatting the link and the text as follows:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;md&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-md &quot;&gt;&lt;code class=&quot;language-md&quot; data-lang=&quot;md&quot;&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;class=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;u-in-reply-to&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;href=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;https:&#x2F;&#x2F;flux.carboxi.de&#x2F;void-bed&#x2F;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;Void Bed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;I feel the same about my bed. Nice writing flux!
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;bridges&quot;&gt;Bridges&lt;&#x2F;h3&gt;
&lt;p&gt;Though I have connected this site to the fediverse with Bridgy Fed, it is opt in using a zola shortcode. Because, I want the articles to have a &quot;blog interaction&quot; from other peoples blog but not from the social media. But, I do use bridgy on my short posts sometimes. &lt;a href=&quot;&#x2F;syndications&#x2F;posse-2024-11-05&#x2F;&quot;&gt;Webmentions&lt;&#x2F;a&gt; and &lt;a href=&quot;&#x2F;syndications&#x2F;posse-2025-02-04&#x2F;&quot;&gt;Linux is&#x2F;not Difficult&lt;&#x2F;a&gt; are some posts I have used bridgy with and they also work as example posts to see how different webmention activities look like in my website.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;lastly&quot;&gt;Lastly&lt;&#x2F;h2&gt;
&lt;p&gt;I had forgotten about webmentions and interactions on my site, but I recently read a post from Joel titled &lt;a href=&quot;https:&#x2F;&#x2F;joelchrono.xyz&#x2F;blog&#x2F;webmentions-but-manual&#x2F;&quot;&gt;Webmentions but manual (for Jekyll)&lt;&#x2F;a&gt; and people giving names to the interactions really caught my attention. I haven&#x27;t given it a name because mine are just Webmentions but I feel like Webmentions are still a good option to have &lt;em&gt;(with much less spam)&lt;&#x2F;em&gt; for interaction if it isn&#x27;t connected to an actual social media.
Some other posts I read were:
[&lt;em&gt;At least for the sake of just pinging them.&lt;&#x2F;em&gt;]&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;notes.jeddacp.com&#x2F;implementing-community-echoes&#x2F;&quot;&gt;Implementing Community Echoes&lt;&#x2F;a&gt;&lt;br &#x2F;&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;forkingmad.blog&#x2F;blog-interactions&#x2F;&quot;&gt;Blog interactions&lt;&#x2F;a&gt;&lt;br &#x2F;&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;kevquirk.com&#x2F;blog&#x2F;what-others-said&quot;&gt;What Others Said...&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I hope webmention on blogging sites takes off. Or maybe it has already taken off. I want the future where everyone can express themselves with their own taste and creativity not having to compromise personality for protocols.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Booting Arch Linux Smoothly</title>
        <published>2025-07-05T00:00:00+00:00</published>
        <updated>2025-07-05T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              scientiac
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://scientiac.space/blog/boot-arch-smoothly/"/>
        <id>https://scientiac.space/blog/boot-arch-smoothly/</id>
        
        <content type="html" xml:base="https://scientiac.space/blog/boot-arch-smoothly/">&lt;h2 id=&quot;my-device&quot;&gt;My Device&lt;&#x2F;h2&gt;
&lt;pre style=&quot;background-color:#282828;color:#fdf4c1aa;&quot;&gt;&lt;code&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                  -`                     scientiac@einstein
&lt;&#x2F;span&gt;&lt;span&gt;                 .o+`                    ------------------
&lt;&#x2F;span&gt;&lt;span&gt;                `ooo&#x2F;                    OS: Arch Linux x86_64
&lt;&#x2F;span&gt;&lt;span&gt;               `+oooo:                   Host: ASUS Zenbook 14 UM3406HA_UM3406HA (1.0)
&lt;&#x2F;span&gt;&lt;span&gt;              `+oooooo:                  Kernel: Linux 6.15.4-arch2-1
&lt;&#x2F;span&gt;&lt;span&gt;              -+oooooo+:                 Uptime: 31 mins
&lt;&#x2F;span&gt;&lt;span&gt;            `&#x2F;:-:++oooo+:                Packages: 997 (pacman)
&lt;&#x2F;span&gt;&lt;span&gt;           `&#x2F;++++&#x2F;+++++++:               Shell: zsh 5.9
&lt;&#x2F;span&gt;&lt;span&gt;          `&#x2F;++++++++++++++:              Display (SDC419D): 2880x1800 @ 60 Hz (as 1440x900) in 14&amp;quot; [Built-in]
&lt;&#x2F;span&gt;&lt;span&gt;         `&#x2F;+++ooooooooooooo&#x2F;`            WM: niri (Wayland)
&lt;&#x2F;span&gt;&lt;span&gt;        .&#x2F;ooosssso++osssssso+`           Cursor: Adwaita (24px)
&lt;&#x2F;span&gt;&lt;span&gt;       .oossssso-````&#x2F;ossssss+`          Terminal: ghostty 1.1.3-arch1
&lt;&#x2F;span&gt;&lt;span&gt;      -osssssso.      :ssssssso.         Terminal Font: FantasqueSansM Nerd Font Mono (11pt)
&lt;&#x2F;span&gt;&lt;span&gt;     :osssssss&#x2F;        osssso+++.        CPU: AMD Ryzen 7 8840HS (16) @ 5.13 GHz
&lt;&#x2F;span&gt;&lt;span&gt;    &#x2F;ossssssss&#x2F;        +ssssooo&#x2F;-        GPU: AMD Radeon 780M Graphics [Integrated]
&lt;&#x2F;span&gt;&lt;span&gt;  `&#x2F;ossssso+&#x2F;:-        -:&#x2F;+osssso+-      Memory: 2.51 GiB &#x2F; 14.91 GiB (17%)
&lt;&#x2F;span&gt;&lt;span&gt; `+sso+:-`                 `.-&#x2F;+oso:     Swap: 0 B &#x2F; 4.00 GiB (0%)
&lt;&#x2F;span&gt;&lt;span&gt;`++:.                           `-&#x2F;+&#x2F;    Disk (&#x2F;): 20.95 GiB &#x2F; 475.94 GiB (4%) - btrfs
&lt;&#x2F;span&gt;&lt;span&gt;.`                                 `&#x2F;    Local IP (wlan0): 192.168.1.71&#x2F;24
&lt;&#x2F;span&gt;&lt;span&gt;                                         Battery (ASUS Battery): 52% [Discharging]
&lt;&#x2F;span&gt;&lt;span&gt;                                         Locale: en_US.UTF-8
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;firstly&quot;&gt;Firstly...&lt;&#x2F;h2&gt;
&lt;p&gt;My friend challenged me to achieve flicker free boot on my laptop like someone achieved it many-many years ago, and said if fedora can do it by default why can&#x27;t we?&lt;&#x2F;p&gt;
&lt;iframe
	class=&quot;youtube-embed&quot;
	src=&quot;https:&#x2F;&#x2F;www.youtube-nocookie.com&#x2F;embed&#x2F;5DW2JgJmsuY&quot;
	allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot;
	referrerpolicy=&quot;strict-origin-when-cross-origin&quot; allowfullscreen&gt;
&lt;&#x2F;iframe&gt;
&lt;p&gt;Technically he didn&#x27;t challenge me, he only mentioned that it was possible. And, I took it as a challenge. Because I know that linux can be as smooth and polished looking as
other commercial OS offerings. And I want my laptop to be as smooth as possible and as clean looking as possible.&lt;&#x2F;p&gt;
&lt;p&gt;So, I tried.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;how-did-you-start&quot;&gt;How did you start?&lt;&#x2F;h3&gt;
&lt;p&gt;The only thing I didn&#x27;t really want to do was reinstall my OS again. But, I had to.
I had never used the Unified Kernel Image (UKI) and I was using &lt;code&gt;systemd-boot&lt;&#x2F;code&gt; as my bootloader.
So, the bootloader had to go and UKI had to be installed.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note&quot;&gt;
	&lt;p class=&quot;alert-title&quot;&gt;Note&lt;&#x2F;p&gt;
	&lt;p&gt;&lt;strong&gt;1.&lt;&#x2F;strong&gt; &lt;em&gt;When installing Arch Linux, use &lt;code&gt;UKI&lt;&#x2F;code&gt; Unified Kernel Image and instead of using a bootloader, use &lt;code&gt;EFIstub&lt;&#x2F;code&gt; (EFI Boot Stub)&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;

&lt;&#x2F;blockquote&gt;
&lt;p&gt;I used &lt;code&gt;archinstall&lt;&#x2F;code&gt; and it had both of these options. It was very easy. I picked all other configurations as I used to do and just installed the system.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;after-installation&quot;&gt;After Installation&lt;&#x2F;h3&gt;
&lt;p&gt;I had to change the kernel parameters, to make all those text go away. So, I tried using &lt;code&gt;efibootmgr&lt;&#x2F;code&gt; and failed again and again.
I couldn&#x27;t for science&#x27;s sake use it properly. Once, I tried using the script recommended by the &lt;code&gt;arch-wiki&lt;&#x2F;code&gt;, the boot process flickered more than It had ever flickered.
Luckily it hadn&#x27;t removed the original entry and &lt;code&gt;efibootmgr&lt;&#x2F;code&gt; had a way to remove the broken entries, so I brought everything back to normal and tried it a countless times, failing each time.&lt;&#x2F;p&gt;
&lt;p&gt;I gave up on &lt;code&gt;efibootmgr&lt;&#x2F;code&gt;, from previous experiences with booting with a splash screen, I knew &lt;code&gt;plymouth&lt;&#x2F;code&gt; was a thing. So, I installed it. And went searching for ways to put kernel-parameters during boot. Plymouth needed &lt;code&gt;quiet splash&lt;&#x2F;code&gt; to work.&lt;&#x2F;p&gt;
&lt;p&gt;Then, I found &lt;code&gt;&#x2F;etc&#x2F;kernel&#x2F;cmdline&lt;&#x2F;code&gt;. I added &lt;code&gt;quiet splash&lt;&#x2F;code&gt; to the end of the line and then rebooted. It showed no changes.
I found out that I had to rebuild the initial ramdisk environment. In other words I had to run:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# To (re-)generate initramfs images based on all existing presets, the -P&#x2F;--allpresets switch is used. 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;sudo mkinitcpio -P
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote class=&quot;note&quot;&gt;
	&lt;p class=&quot;alert-title&quot;&gt;Note&lt;&#x2F;p&gt;
	&lt;p&gt;&lt;strong&gt;2.&lt;&#x2F;strong&gt; &lt;em&gt;To add kernel parameters, you need to append the text on &lt;code&gt;&#x2F;etc&#x2F;kernel&#x2F;cmdline&lt;&#x2F;code&gt; and then, rebuild the initramfs image using &lt;code&gt;sudo mkinitcpio -P&lt;&#x2F;code&gt;.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;

&lt;&#x2F;blockquote&gt;
&lt;p&gt;My &lt;code&gt;&#x2F;etc&#x2F;kernel&#x2F;cmdline&lt;&#x2F;code&gt; looks like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;root=PARTUUID=4638cd24-77e4-4ed3-bb8a-9478d9c2d2db zswap.enabled=0 rw rootfstype=btrfs quiet loglevel=3 udev.log-priority=3 systemd.show_status=false splash
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The part until &lt;code&gt;rootfstyps=btrfs&lt;&#x2F;code&gt; was autogenerated during installation and I added the rest afterwards.&lt;&#x2F;p&gt;
&lt;p&gt;Now, &lt;strong&gt;It Worked!&lt;&#x2F;strong&gt; But, it was the same(somewhat). The splash animation for ASUS ran, then it showed me a big Arch Linux logo, then the screen went black and then the splash screen reappeared and it dropped me to my login manager. This was the behavior it used to show before I installed arch without doing anything I previously did. Basically, I was back to how it was before I reinstalled my OS. All that copying and configuring for nothing.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;why-you-should-not-give-up&quot;&gt;Why you should not give up&lt;&#x2F;h3&gt;
&lt;p&gt;So, I started putting different kernel params to check if one of it worked and if any of it removed blackout before showing me the splash screen again. The wiki for &lt;a href=&quot;https:&#x2F;&#x2F;wiki.archlinux.org&#x2F;title&#x2F;Silent_boot&quot;&gt;silent boot&lt;&#x2F;a&gt; suggested I put &lt;code&gt;loglevel=3 systemd.show_status=auto rd.udev.log_level=3&lt;&#x2F;code&gt; in the kernel parameters.&lt;&#x2F;p&gt;
&lt;p&gt;It also said:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;If you also want to stop systemd from printing its version number when booting, you should also append udev.log_level=3 to your kernel parameters. If systemd is used in an initramfs, append rd.udev.log_level=3 instead.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Since, I wasn&#x27;t using &lt;code&gt;systemd&lt;&#x2F;code&gt; in the initramfs, I used &lt;code&gt;udev.log_level=3&lt;&#x2F;code&gt; instead. Then I rebuilt the initramfs and rebooted. &lt;strong&gt;It was the same.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note&quot;&gt;
	&lt;p class=&quot;alert-title&quot;&gt;Note&lt;&#x2F;p&gt;
	&lt;p&gt;&lt;strong&gt;3.&lt;&#x2F;strong&gt; &lt;em&gt;Append &lt;code&gt;quiet loglevel=3 udev.log-priority=3 systemd.show_status=false splash&lt;&#x2F;code&gt; in &lt;code&gt;&#x2F;etc&#x2F;kernel&#x2F;cmdline&lt;&#x2F;code&gt; to enable splash and quiet out the logs.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;

&lt;&#x2F;blockquote&gt;
&lt;p&gt;Then I became desperate and started looking everywhere; forums, wikis, even YouTube comment section. And, you know what? YouTube comments helped for once.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;boot-arch-smoothly&#x2F;comment.png&quot; alt=&quot;Youtube Comment&quot; &#x2F;&gt;
This comment is from the YouTube video I have linked above.&lt;&#x2F;p&gt;
&lt;p&gt;I finally realised, &lt;code&gt;plymouth&lt;&#x2F;code&gt; was the culprit. The kernel had to hand over the process to plymouth and it caused the delay after the big Arch Linux logo.&lt;&#x2F;p&gt;
&lt;p&gt;I also found out that kernel itself can render the logo without plymouth, that was how the Arch Linux Logo was being rendered even before plymouth had started.
If only, I had read the silent boot wiki entry properly:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;To prevent the kernel from blanking the vendor logo, Linux 4.19 introduced a new configuration option &lt;code&gt;FRAMEBUFFER_CONSOLE_DEFERRED_TAKEOVER&lt;&#x2F;code&gt; that retains the contents of the framebuffer until text needs to be printed on the framebuffer console. Since version 4.19.arch1, the official Arch Linux kernels are compiled with &lt;code&gt;CONFIG_FRAMEBUFFER_CONSOLE_DEFERRED_TAKEOVER=y&lt;&#x2F;code&gt;.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Thanks to arch I didn&#x27;t have to recompile the kernel to get that.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;tip&quot;&gt;
	&lt;p class=&quot;alert-title&quot;&gt;Tip&lt;&#x2F;p&gt;
	&lt;p&gt;&lt;em&gt;There is no need to use &lt;code&gt;plymouth&lt;&#x2F;code&gt; because the Linux kernel can show splash images by itself and enabling both only makes the process less smoother.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;

&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;it-still-wasn-t-smooth&quot;&gt;It still wasn&#x27;t &quot;smooth&quot;&lt;&#x2F;h3&gt;
&lt;p&gt;I didn&#x27;t want the Arch Linux logo, I wanted my vendor logo to be continued, like it was still booting until my login screen appeared.
If only I can replace the &quot;Arch Linux&quot; logo with &lt;code&gt;bgrt&lt;&#x2F;code&gt; (The vendor&#x27;s splash logo). So, I went looking where I could change that.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;The Boot Graphics Record Table (BGRT) is an optional ACPI table which contains a pointer to the image that has been drawn during boot.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;I found &lt;code&gt;&#x2F;etc&#x2F;mkinitcpio.d&#x2F;linux.preset&lt;&#x2F;code&gt; to be the exact thing I was looking for. And from the name itself I knew I needed to rebuild the initramfs again for the changes to be reflected.&lt;&#x2F;p&gt;
&lt;p&gt;I had to change the following line in &lt;code&gt;linux.preset&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ini&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-ini &quot;&gt;&lt;code class=&quot;language-ini&quot; data-lang=&quot;ini&quot;&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;default_options&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;--splash &#x2F;usr&#x2F;share&#x2F;systemd&#x2F;bootctl&#x2F;splash-arch.bmp&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;My first instinct was to go to &lt;code&gt;&#x2F;usr&#x2F;share&#x2F;systemd&#x2F;bootctl&#x2F;&lt;&#x2F;code&gt; and &lt;code&gt;rm splash-arch.bmp&lt;&#x2F;code&gt;. I did that and rebooted, Now, It showed black screen until the login manager showed up.
It was progress.&lt;&#x2F;p&gt;
&lt;p&gt;Then I found my &lt;code&gt;bgrt&lt;&#x2F;code&gt; image in &lt;code&gt;&#x2F;sys&#x2F;firmware&#x2F;acpi&#x2F;bgrt&#x2F;&lt;&#x2F;code&gt; it was named &lt;code&gt;image&lt;&#x2F;code&gt; with no file extension.&lt;&#x2F;p&gt;
&lt;p&gt;So, I changed the above line to:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ini&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-ini &quot;&gt;&lt;code class=&quot;language-ini&quot; data-lang=&quot;ini&quot;&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;default_options&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;--splash &#x2F;sys&#x2F;firmware&#x2F;acpi&#x2F;bgrt&#x2F;image&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then I rebuilt the initramfs and rebooted. To be greeted with a smooth boot. Like I wanted it to be. Showing bgrt until the login manager showed up.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;note&quot;&gt;
	&lt;p class=&quot;alert-title&quot;&gt;Note&lt;&#x2F;p&gt;
	&lt;p&gt;&lt;strong&gt;4.&lt;&#x2F;strong&gt; &lt;em&gt;Change the &lt;code&gt;default_options=&lt;&#x2F;code&gt; configuration to &lt;code&gt;&#x2F;sys&#x2F;firmware&#x2F;acpi&#x2F;bgrt&#x2F;image&lt;&#x2F;code&gt; in &lt;code&gt;&#x2F;etc&#x2F;mkinitcpio.d&#x2F;linux.preset&lt;&#x2F;code&gt; then rebuild the initramfs by doing &lt;code&gt;sudo mkinitcpio -P&lt;&#x2F;code&gt;.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;

&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;it-was-not-as-smooth-as-plymouth&quot;&gt;It was not as &quot;smooth&quot; as plymouth&lt;&#x2F;h3&gt;
&lt;p&gt;The booting process was good and how I wanted it to be, but when it came to rebooting it showed:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;[    54.796241] watchdog: watchdog0: watchdog did not stop!
&lt;&#x2F;span&gt;&lt;span&gt;[    54.918590] watchdog: watchdog0: watchdog did not stop!
&lt;&#x2F;span&gt;&lt;span&gt;[    55.597358] reboot: Restarting system
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I didn&#x27;t want that to show up and with a bit of research, I came to a conclusion that disabling watchdog was fine so I did. I edited &lt;code&gt;&#x2F;etc&#x2F;modprobe.d&#x2F;blacklist.conf&lt;&#x2F;code&gt; and added &lt;code&gt;blacklist sp5100_tco&lt;&#x2F;code&gt;. Intel users are supposed to &lt;code&gt;blacklist iTCO_wdt&lt;&#x2F;code&gt; or the watchdog that their system used.&lt;&#x2F;p&gt;
&lt;p&gt;Now my &lt;code&gt;&#x2F;etc&#x2F;modprobe.d&#x2F;blacklist.conf&lt;&#x2F;code&gt; has:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;# Do not load the watchdog module on boot.
&lt;&#x2F;span&gt;&lt;span&gt;blacklist sp5100_tco
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote class=&quot;note&quot;&gt;
	&lt;p class=&quot;alert-title&quot;&gt;Note&lt;&#x2F;p&gt;
	&lt;p&gt;&lt;strong&gt;5.&lt;&#x2F;strong&gt; &lt;em&gt;Blacklist your watchdog so you don&#x27;t get watchdog messages when rebooting and powering off by editing &lt;code&gt;&#x2F;etc&#x2F;modprobe.d&#x2F;blacklist.conf&lt;&#x2F;code&gt;.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;

&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;i-don-t-like-having-nice-things&quot;&gt;I don&#x27;t like having nice things&lt;&#x2F;h3&gt;
&lt;p&gt;What I did above is enough to get flicker free boot&#x2F;smooth boot or whatever you call it, but I wanted more, I want &lt;code&gt;plymouth&lt;&#x2F;code&gt; to work without flicker. Spoiler: I couldn&#x27;t.&lt;&#x2F;p&gt;
&lt;p&gt;Anyway, I switched to &lt;code&gt;systemd&lt;&#x2F;code&gt; instead of &lt;code&gt;udev&lt;&#x2F;code&gt; so my &lt;code&gt;&#x2F;etc&#x2F;mkinitcpio.conf&lt;&#x2F;code&gt; has the following hooks now:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;HOOKS=(base systemd modconf autodetect kms keyboard sd-vconsole block filesystems fsck plymouth)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I reinstalled plymouth, and I like it when it smoothly transitions to GDM instead of flashing me to GDM. It was a tradeoff between GDM flash or just flicker when loading spalash screen.&lt;&#x2F;p&gt;
&lt;p&gt;I added more kernel parameters to mitigate the flashing but I couldn&#x27;t do it.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;root=PARTUUID=4638cd24-77e4-4ed3-bb8a-9478d9c2d2db zswap.enabled=0 rw rootfstype=btrfs amdgpu.modeset=1 amdgpu.dc=1 video=efifb:keep plymouth.use-simpledrm quiet vt.global_cursor_default=0 loglevel=3 rd.udev.log_level=3 systemd.show_status=auto splash
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;plymouth.use-simpledrm&lt;&#x2F;code&gt; does start plymouth immediately but when the &lt;code&gt;amdgpu&lt;&#x2F;code&gt; driver is ready it mode-switches to it and the black screen appears. I can technically use &lt;code&gt;nomodeset&lt;&#x2F;code&gt; and achieve true flicker free boot with plymouth and everything but then I lose out on my graphics driver setting dpi scaling and brightness and more for me on boot.&lt;&#x2F;p&gt;
&lt;p&gt;I even tried setting &lt;code&gt;&#x2F;etc&#x2F;plymouth&#x2F;plymouthd.conf&lt;&#x2F;code&gt; to delay it&#x27;s starting but it still doesn&#x27;t stop flickering. It either flickers or it skips and I get the UKI splash screen until the login manager.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ini&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-ini &quot;&gt;&lt;code class=&quot;language-ini&quot; data-lang=&quot;ini&quot;&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;[Daemon]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ShowDelay&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;DeviceTimeout&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;30
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I think I will just remove the plymouth configuration since it isn&#x27;t helping anything. Or maybe I&#x27;ll just leave it there because it is not doing anything.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;removing-arch-linux-logo&quot;&gt;Removing Arch Linux Logo&lt;&#x2F;h3&gt;
&lt;p&gt;To remove the logo from GDM I quickly installed &lt;code&gt;gdm-settings&lt;&#x2F;code&gt; and there was a toggle which I turned off.&lt;&#x2F;p&gt;
&lt;p&gt;I didn&#x27;t like the logo shown by plymouth during boot either, so I just removed the image &lt;code&gt;watermark.png&lt;&#x2F;code&gt; from the spinner theme in &lt;code&gt;&#x2F;usr&#x2F;share&#x2F;plymouth&#x2F;themes&#x2F;spinner&#x2F;&lt;&#x2F;code&gt;. I also removed all animation and throbber images just to make everything clean.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h3&gt;
&lt;p&gt;I did eventually come back to &quot;not so smooth boot&quot; but I am one &lt;code&gt;sudo pacman -R plymouth&lt;&#x2F;code&gt; away from it. Furthermore, I can boast about having 3 splash screens that look the same transitioning seamlessly*, even 4 if you count the UEFI animation.&lt;&#x2F;p&gt;
&lt;p&gt;It goes as follows:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;UEFI&lt;&#x2F;code&gt; animation starts and ends.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;UKI Splash Screen&lt;&#x2F;code&gt; starts and ends.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;simpledrm&lt;&#x2F;code&gt; backed &lt;code&gt;plymouth&lt;&#x2F;code&gt; bgrt theme starts and screen goes blank.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;amdgpu&lt;&#x2F;code&gt; backed plymouth screen gradually appears and transitions to GDM.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;But, if I remove plymouth:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;UEFI&lt;&#x2F;code&gt; animation starts and ends.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;UKI Splash Screen&lt;&#x2F;code&gt; starts and drops me to GDM.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>3o14 social</title>
        <published>2025-02-28T00:00:00+00:00</published>
        <updated>2025-02-28T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              scientiac
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://scientiac.space/blog/3o14-social/"/>
        <id>https://scientiac.space/blog/3o14-social/</id>
        
        <content type="html" xml:base="https://scientiac.space/blog/3o14-social/">&lt;img src=&quot;&#x2F;images&#x2F;3o14_com&#x2F;makuro.png&quot; alt=&quot;App Icon for 3o14&quot; style=&quot;width: 25%;&quot; &#x2F;&gt;
&lt;h2 id=&quot;preface&quot;&gt;Preface&lt;&#x2F;h2&gt;
&lt;p&gt;When I started using Linux, I found out that I had to use cronjobs to run some scripts I wanted to run in repeat, that was how I was introduced about services&#x2F;daemons. Then it was when trying to make a website, I needed a server to continuously see the live changes that I did to my HTML file. I gradually learned about more industry standard servers like Apache after playing with the python server module almost all the time when testing and making a website. Then I found out about self-hosting. [&lt;em&gt;That&#x27;s what&#x27;s like growing in a Linux environment.&lt;&#x2F;em&gt;] I hated subscriptions and was unable to use the &quot;free&quot; VPS services due to their credit card requirements. Almost everything I did was entirely on my laptop and on my phone with Termux. [&lt;em&gt;I used to use Termux even before I got a laptop.&lt;&#x2F;em&gt;] Then, being in the Linux communities I got interested in Privacy and Security, then I joined mastodon as a healthier alternative social media platform as an experiment.&lt;&#x2F;p&gt;
&lt;p&gt;I didn&#x27;t know about decentralization and federation back then, I used the link from the YouTube channel I liked and that was my social media home, until that server (Instance) got shut down, and I had to move to a new instance, that is how I got to know about decentralization and federation. Now living in one of the servers, I found out about more services like mastodon that weren&#x27;t mastodon but could communicate with my instance but had a completely different UI and features. I learned about single user instances and servers particularly for a single user. Since then, I wanted my own private island(instance) of my social media. I did somewhat treat this blogging site as my own island, but it is static and isn&#x27;t like a &quot;social&quot; media at all. This is how I got interested in ActivityPub and wanted to build my own.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;&#x2F;h2&gt;
&lt;p&gt;3o14 (pi) is a single user ActivityPub based social media that also supports rendering mathematical typesetting as a way to scientifically communicate between people. It is a self-hostable social media for a single person that is Privacy respecting (obviously) and we (It&#x27;s not my single effort.) built it to understand the underlying protocol ActivityPub and how it worked. (And as a minor project for our computer engineering degree.)&lt;&#x2F;p&gt;
&lt;h3 id=&quot;how-the-fediverse-works&quot;&gt;How the Fediverse works&lt;&#x2F;h3&gt;
&lt;p&gt;The Fediverse operates on a decentralized model, allowing various independent servers, or instances, to communicate with one another through open protocols like ActivityPub. Each instance hosts its own community and user base [&lt;em&gt;It could be a single user too&lt;&#x2F;em&gt;], enabling users to create accounts on different servers while still interacting seamlessly with users on other instances. When a user posts content, that activity is packaged in a standardized format and sent to other instances, allowing for real-time updates and interactions across the network. This federated approach ensures that no single entity controls the entire ecosystem, promoting user autonomy and privacy. Additionally, the use of open-source software means that anyone can set up their own instance, fostering a diverse range of platforms and experiences within the Fediverse. By leveraging these protocols, you can build applications that not only respect user privacy but also facilitate rich, interconnected social experiences across various platforms.&lt;&#x2F;p&gt;
&lt;img src=&quot;&#x2F;images&#x2F;3o14_com&#x2F;fediverse.png&quot; alt=&quot;App Icon for 3o14&quot; &#x2F;&gt;
&lt;h3 id=&quot;what-we-wanted-to-build-and-eventually-built&quot;&gt;What we wanted to build (and eventually built)&lt;&#x2F;h3&gt;
&lt;p&gt;We wanted to build a single user social media platform using the protocol, that supported mathematical syntax for scientific communication. It had to be easy to deploy with minimal efforts and had to be federated with the network of Fediverse. It would be a platform for tech minded scientific people who want privacy in their social media and want to own their own data without having to rely on big tech and black box social media with constraints like Facebook, X, Instagram, etc. which do not have anything helpful for using mathematical symbols in the posts. [&lt;em&gt;This absolutely doesn&#x27;t mean that it doesn&#x27;t support regular posts, it should.&lt;&#x2F;em&gt;]&lt;&#x2F;p&gt;
&lt;p&gt;I want to start from the frontend, because that is the most amount of work I have put in.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;frontend&quot;&gt;Frontend&lt;&#x2F;h3&gt;
&lt;p&gt;For the frontend, I used React Native because I was looking at the trends and saw a growing social media Bluesky writing its cross-platform frontend entirely in React Native and saw how they had all the features available in both their web and mobile platforms. It was fairly easy to use with a framework called &#x27;Expo&#x27;, which made building and testing the app in web and in android much easier. Learning about routes of expo and how it handled screens and modals was a bit difficult at first, but it got easier as the app grew. But working with multiple platform did bring multiple issues for different platforms.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;3o14_com&#x2F;login.png&quot; alt=&quot;Instance Chooser&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;One of the issues was rendering mathematics, there was no library that could render math on web as well as in mobile. I had to work around by using two libraries with separate rendering logic for web and mobile, of which I still am not satisfied with how the mobile renderer is a bit slow and janky, but I made the two platforms act as closest as possible.&lt;&#x2F;p&gt;
&lt;p&gt;Learning about ActivityPub APIs was fun, I got to know how the requests were made and how things worked after the UI is clicked, how screens were loaded and so much. AI tools helped a lot to write logics and understand them when I was absolutely blank about what to do. [&lt;em&gt;It happened more often than you&#x27;d think.&lt;&#x2F;em&gt;]&lt;&#x2F;p&gt;
&lt;h3 id=&quot;backend&quot;&gt;Backend&lt;&#x2F;h3&gt;
&lt;p&gt;I did not do much work on the backend, &lt;a href=&quot;https:&#x2F;&#x2F;faulty.carboxi.de&quot;&gt;faultypointer&lt;&#x2F;a&gt; did the work. But I do understand the technologies used in it. Hono was used for the server and fedify was used as the typescript library to eliminate the boilerplate for building Fediverse apps (I didn&#x27;t just take that from the fedify site). The server too is written in typescript like the frontend. Fedify works as the middleware that processes the &lt;code&gt;activity&#x2F;json&lt;&#x2F;code&gt; data that are requested to the server for federation. The database is Postgres and the schema and query is handled by the drizzle ORM.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;showcase&quot;&gt;Showcase&lt;&#x2F;h2&gt;
&lt;div class=&quot;gallery&quot; style=&quot;display:flex; flex-wrap: wrap;&quot;&gt;
  &lt;img src=&quot;&#x2F;images&#x2F;3o14_com&#x2F;home_page.png&quot; style=&quot;width: 19rem; padding:0.25rem;border-radius: 1.75rem;&quot;&gt;
  &lt;img src=&quot;&#x2F;images&#x2F;3o14_com&#x2F;reply_page.png&quot; style=&quot;width: 19rem; padding:0.25rem;border-radius: 1.75rem;&quot;&gt;
&lt;&#x2F;div&gt;
&lt;div style=&quot;text-align: center&quot;&gt;
&lt;p&gt;&lt;strong&gt;img:&lt;&#x2F;strong&gt; &lt;em&gt;homepage and replies page&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;gallery&quot; style=&quot;display:flex; flex-wrap: wrap;&quot;&gt;
  &lt;img src=&quot;&#x2F;images&#x2F;3o14_com&#x2F;light_compose.png&quot; style=&quot;width: 19rem; padding:0.25rem;border-radius: 1.75rem;&quot;&gt;
  &lt;img src=&quot;&#x2F;images&#x2F;3o14_com&#x2F;light_reply.png&quot; style=&quot;width: 19rem; padding:0.25rem;border-radius: 1.75rem;&quot;&gt;
&lt;&#x2F;div&gt;
&lt;div style=&quot;text-align: center&quot;&gt;
&lt;p&gt;&lt;strong&gt;img:&lt;&#x2F;strong&gt; &lt;em&gt;post compose and reply compose page in light mode with post visibility menu toggled&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;gallery&quot; style=&quot;display:flex; flex-wrap: wrap;&quot;&gt;
  &lt;img src=&quot;&#x2F;images&#x2F;3o14_com&#x2F;light_mobile.png&quot; style=&quot;width: 15rem; padding:1rem;border-radius: 1.75rem;&quot;&gt;
  &lt;img src=&quot;&#x2F;images&#x2F;3o14_com&#x2F;dark_mobile.png&quot; style=&quot;width: 15rem; padding:1rem;border-radius: 1.75rem;&quot;&gt;
&lt;&#x2F;div&gt;
&lt;div style=&quot;text-align: center&quot;&gt;
&lt;p&gt;&lt;strong&gt;img:&lt;&#x2F;strong&gt; &lt;em&gt;homepage and profile page in mobile&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;There isn&#x27;t much to conclude here because we have achieved the basics of what we want, but the work is very incomplete and alpha. We have an android app that does work with all other servers, not just ours thanks to Fediverse, but everything is bare-bones and need many improvements. This piece of art is presentable, but I now need to host both the webui and backend on a Raspberry Pi to show that a simple device can handle your social media, and you don&#x27;t have to rely on big tech for it.&lt;&#x2F;p&gt;
&lt;p&gt;Lastly, here is the source for what we are working on, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;3o14-com&quot;&gt;github&#x2F;3o14-com&lt;&#x2F;a&gt;. Enjoy!&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Beautifying Firefox with &quot;chrome&quot;</title>
        <published>2024-08-20T00:00:00+00:00</published>
        <updated>2024-08-20T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              scientiac
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://scientiac.space/blog/firefox-userstyle/"/>
        <id>https://scientiac.space/blog/firefox-userstyle/</id>
        
        <content type="html" xml:base="https://scientiac.space/blog/firefox-userstyle/">&lt;p&gt;My mind goes hyperactive whenever exams are near, this semester is no different. I always find something very interesting to do every time an exam is around. This semester, I went into a rabbit hole of customizing Firefox to make it minimal (or immersive), I&#x27;d say.&lt;&#x2F;p&gt;
&lt;div class=&quot;gallery&quot; style=&quot;display:flex; flex-wrap: wrap;&quot;&gt;
  &lt;img src=&quot;&#x2F;images&#x2F;firefox-userstyle&#x2F;normal-home.png&quot; style=&quot;width: 19rem; padding:0.25rem;border-radius: 1.75rem;&quot;&gt;
  &lt;img src=&quot;&#x2F;images&#x2F;firefox-userstyle&#x2F;normal-tabs.png&quot; style=&quot;width: 19rem; padding:0.25rem;border-radius: 1.75rem;&quot;&gt;
&lt;&#x2F;div&gt;
&lt;div style=&quot;text-align: center&quot;&gt;
&lt;p&gt;&lt;strong&gt;img:&lt;&#x2F;strong&gt; &lt;em&gt;homepage and tabs-expanded view&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;firefox-userstyle&#x2F;normal-website.png&quot; alt=&quot;normal-website&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;div style=&quot;text-align: center&quot;&gt;
&lt;p&gt;&lt;strong&gt;img:&lt;&#x2F;strong&gt; &lt;em&gt;webpage view&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;I am very much into customization, and I like to keep changing things around. When I was using gnome in arch Linux some years back I had come across &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rafaelmardojai&#x2F;firefox-gnome-theme&quot;&gt;rafaelmardojai&#x2F;firefox-gnome-theme&lt;&#x2F;a&gt; which I immediately installed to make my system consistent with the &lt;em&gt;libadwaita&lt;&#x2F;em&gt; style. That was the time when I realized the repo had almost 100% CSS in the GitHub language thingy bar. I knew what CSS was but never bothered to look into the Firefox theme, it simply worked.&lt;&#x2F;p&gt;
&lt;p&gt;Fast-forward to a few months ago, the arc browser had the internet going crazy about it. I did like the UI being minimal and focused on viewing websites, hiding the settings that would normally show up all the time. Since you had to make an account to just use the browser, I didn&#x27;t use it. Then I went searching for themes that replicated the UI on Firefox itself. I found &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;KiKaraage&#x2F;ArcWTF&quot;&gt;KiKaraage&#x2F;ArcWTF&lt;&#x2F;a&gt; which I used for a while. This time I modified the CSS and restarted Firefox and kept on updating the CSS and restarting Firefox until I got what I wanted. I hated that I had to restart Firefox to apply the small change in &lt;code&gt;userChrome.css&lt;&#x2F;code&gt; that I was going to repeat because I didn&#x27;t know what I was doing.&lt;&#x2F;p&gt;
&lt;p&gt;I am currently using &lt;code&gt;nix&lt;&#x2F;code&gt;, so, eventually this was to come. I had to configure my Firefox with &lt;code&gt;home-manager&lt;&#x2F;code&gt;. This caused me to leave behind my arcWTF css because there was no easy way to simply put the chrome folder in its place with nix. But, there was a way to write &lt;code&gt;userChrome&lt;&#x2F;code&gt; within the nix configuration. This way of changing CSS was even more of a hassle because I had to first write it inside nix with no LSP for CSS, then I had to evaluate the nix file to put things into place and then restart Firefox.&lt;&#x2F;p&gt;
&lt;p&gt;Aaah! That was really clunky but, I then made single &lt;code&gt;userChrome.css&lt;&#x2F;code&gt; and &lt;code&gt;userContent.css&lt;&#x2F;code&gt; files and then just imported them with nix to read the file instead of writing the CSS inside the &lt;code&gt;.nix&lt;&#x2F;code&gt; file, and it was a little better. Now started my journey to make the most minimal and at the same time good Firefox userstyle in a single &lt;code&gt;.css&lt;&#x2F;code&gt; file. I then found &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;migueravila&#x2F;SimpleFox&quot;&gt;simplefox&lt;&#x2F;a&gt; a goldmine for minimal Firefox config, but there was a single issue, I was used to the tabs being tree style and on the left sidebar. So, I installed &lt;a href=&quot;https:&#x2F;&#x2F;addons.mozilla.org&#x2F;en-US&#x2F;firefox&#x2F;addon&#x2F;sidebery&#x2F;&quot;&gt;sidebery&lt;&#x2F;a&gt; and got some CSS from arcWTF to make the collapsed sidebar work.&lt;&#x2F;p&gt;
&lt;p&gt;Then I got a new laptop, which currently has windows, but It has a gorgeous screen which in comparison to the previous laptop is the difference of 70% more DCI-P3 with a 3k OLED screen. I copied my CSS from my NixOS machine, and it was working pretty well. Until I had an idea to improve it further. For days, I kept editing the CSS and restarting my Firefox to change the &lt;code&gt;.css&lt;&#x2F;code&gt; with hit and trial getting more failures than success in the style actually being like I intended it to be. And then yesterday I was fed up with doing that and actually searched if there was a way of doing that without restarting Firefox (live).&lt;&#x2F;p&gt;
&lt;p&gt;Surprise, surprise, it was not just possible but intentional. I wished I had known about this before. You just do the following things:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Open the &lt;code&gt;hamburger menu&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Go to &lt;code&gt;more tools&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Click on &lt;code&gt;web developer tools&lt;&#x2F;code&gt;.
The web developer interface will open, now on the top right side of the toolbox,&lt;&#x2F;li&gt;
&lt;li&gt;Click on the &lt;code&gt;3 dot menu&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Click on &lt;code&gt;settings&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Enable two options:&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre style=&quot;background-color:#282828;color:#fdf4c1aa;&quot;&gt;&lt;code&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    enable remote debugging
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre style=&quot;background-color:#282828;color:#fdf4c1aa;&quot;&gt;&lt;code&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    enable browser chrome and add-on debugging toolboxes.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;7&quot;&gt;
&lt;li&gt;Then go to &lt;code&gt;hamburger menu &amp;gt; more tools &amp;gt; browser toolbox&lt;&#x2F;code&gt; or the shortcut &lt;code&gt;Ctrl+Shift+Alt-I&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Then it&#x27;ll ask for confirmation with the following prompt:&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre style=&quot;background-color:#282828;color:#fdf4c1aa;&quot;&gt;&lt;code&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    An incoming request to permit remote debugging connection was detected. A remote client can take complete control over your browser!
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    Client Endpoint: 127.0.0.1:51146
&lt;&#x2F;span&gt;&lt;span&gt;    Server Endpoint: 127.0.0.1:51141
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    Allow connection?
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;9&quot;&gt;
&lt;li&gt;Allow it and the toolbox opens. Go to the &lt;code&gt;style editior&lt;&#x2F;code&gt; from the menu.&lt;&#x2F;li&gt;
&lt;li&gt;Find &lt;code&gt;userChrome.css&lt;&#x2F;code&gt; and enjoy live tinkering. When you are done, just click on save or &lt;code&gt;Ctrl+S&lt;&#x2F;code&gt; and it is permanent.&lt;&#x2F;li&gt;
&lt;li&gt;For &lt;code&gt;userContent.css&lt;&#x2F;code&gt; just come to the Firefox homepage and hit &lt;code&gt;Ctrl+Shift+C&lt;&#x2F;code&gt;, go to the style editor and find the &lt;code&gt;userContent.css&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;finally&quot;&gt;Finally&lt;&#x2F;h2&gt;
&lt;p&gt;I created this beautiful Firefox userstyle with a focus on minimalism and web content. It&#x27;s called &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;scientiac&#x2F;scifox&quot;&gt;scifox&lt;&#x2F;a&gt; because duh! It&#x27;s my Firefox I will call it whatever I want. I am also working on a version with hidden panels that show up on hover to make it even more minimalistic and immersive. If you want to check that out, it&#x27;s on the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;scientiac&#x2F;scifox&#x2F;tree&#x2F;immersive&quot;&gt;immersive&lt;&#x2F;a&gt; branch.&lt;&#x2F;p&gt;
&lt;div class=&quot;gallery&quot; style=&quot;display:flex; flex-wrap: wrap;&quot;&gt;
  &lt;img src=&quot;&#x2F;images&#x2F;firefox-userstyle&#x2F;immersive-home.png&quot; style=&quot;width: 19rem; padding:0.25rem;border-radius: 1.75rem;&quot;&gt;
  &lt;img src=&quot;&#x2F;images&#x2F;firefox-userstyle&#x2F;immersive-tabs.png&quot; style=&quot;width: 19rem; padding:0.25rem;border-radius: 1.75rem;&quot;&gt;
&lt;&#x2F;div&gt;
&lt;div style=&quot;text-align: center&quot;&gt;
&lt;p&gt;&lt;strong&gt;img:&lt;&#x2F;strong&gt; &lt;em&gt;immersive homepage and tabs-expanded view&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;firefox-userstyle&#x2F;website.png&quot; alt=&quot;website&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;div style=&quot;text-align: center&quot;&gt;
&lt;p&gt;&lt;strong&gt;img:&lt;&#x2F;strong&gt; &lt;em&gt;immersive webpage view&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;I have grown to prefer this minimal UI, and I absolutely love &lt;a href=&quot;https:&#x2F;&#x2F;addons.mozilla.org&#x2F;en-US&#x2F;firefox&#x2F;addon&#x2F;adaptive-tab-bar-colour&#x2F;&quot;&gt;Adaptive Tab Bar Colour&lt;&#x2F;a&gt; for making the whole UI follow the style the creator of the website intended. And one more thing, I am in love with &lt;a href=&quot;https:&#x2F;&#x2F;addons.mozilla.org&#x2F;en-US&#x2F;firefox&#x2F;addon&#x2F;ublock-origin&#x2F;&quot;&gt;uBlock Origin&lt;&#x2F;a&gt; and can&#x27;t live without it. &lt;strong&gt;So, if you are not a Firefox user give Firefox a go, I know it&#x27;ll not disappoint you and even if it does Firefox is like Linux, you can pick and plug features make it work the way you want.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Looking for the URL bar in webpage? Hover where it should be and you might just find it.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Manoid: A Waste Management Robot</title>
        <published>2024-06-12T00:00:00+00:00</published>
        <updated>2024-06-12T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              scientiac
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://scientiac.space/blog/yantra-bot/"/>
        <id>https://scientiac.space/blog/yantra-bot/</id>
        
        <content type="html" xml:base="https://scientiac.space/blog/yantra-bot/">&lt;p&gt;&lt;strong&gt;A Smart Waste Management Robot using Python and OpenCV&lt;&#x2F;strong&gt; that can detect the nearest waste(Determined by an &lt;code&gt;no 8&lt;&#x2F;code&gt; ArUco Marker in the video), navigate to it using the shortest path on the map, pick it(Denoted by a &lt;code&gt;5 second&lt;&#x2F;code&gt; stop in the video) and reach the destination(Determined By &lt;code&gt;no 5&lt;&#x2F;code&gt; Aruco Marker in the video) to dump it and again repeat the process if more waste is detected; with only sensor being an overhead camera tracking the ArUco Markers.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;video src=&quot;&#x2F;images&#x2F;manoid&#x2F;manoid.mp4&quot; controls&gt;&lt;&#x2F;video&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;In the video, I am picking the robot up sometimes to keep it on a new position to show that it can track it&#x27;s last position and go directly there instead of trying to calculate the route again.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;In today&#x27;s world, efficient waste management is becoming increasingly crucial due to rapid urbanization and population growth. Traditional methods of waste collection and dumping are labor-intensive and often inefficient. By integrating robotics and advanced algorithms, we can streamline these processes, reduce human effort, and ensure a cleaner environment. This project, &#x27;manoid&#x27;, aims to demonstrate how a robot can autonomously detect, navigate, and manage waste using only a single overhead camera and advanced computer vision techniques.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;I have written another blog post related to this: &lt;a href=&quot;https:&#x2F;&#x2F;scientiac.space&#x2F;blog&#x2F;esp-mosquitto&#x2F;&quot;&gt;Manoid: Communication&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Let&#x27;s see how it was made.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;requirements&quot;&gt;Requirements:&lt;&#x2F;h3&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;strong&gt;Category&lt;&#x2F;strong&gt;&lt;&#x2F;th&gt;&lt;th&gt;&lt;strong&gt;Component&lt;&#x2F;strong&gt;&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;Hardware&lt;&#x2F;td&gt;&lt;td&gt;ESP32 Microcontroller&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Hardware&lt;&#x2F;td&gt;&lt;td&gt;L298N Motor Driver&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Hardware&lt;&#x2F;td&gt;&lt;td&gt;DC Motor and Wheels&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Hardware&lt;&#x2F;td&gt;&lt;td&gt;A 12V Battery&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Hardware&lt;&#x2F;td&gt;&lt;td&gt;A camera (I used my phone with an IP Camera app for video streaming)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Software&lt;&#x2F;td&gt;&lt;td&gt;Python (for publishing)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Software&lt;&#x2F;td&gt;&lt;td&gt;Arduino IDE (for ESP32 firmware)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Software&lt;&#x2F;td&gt;&lt;td&gt;mosquitto (for serving)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h2 id=&quot;basic-setup&quot;&gt;Basic Setup&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;setting-up-arduino-ide&quot;&gt;Setting Up Arduino IDE&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;strong&gt;To install the ESP32 board in your Arduino IDE, follow these instructions:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;In your Arduino IDE, go to File &amp;gt; Preferences.&lt;&#x2F;li&gt;
&lt;li&gt;Enter the following into the “Additional Board Manager URLs” field:&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;espressif&#x2F;arduino-esp32&#x2F;gh-pages&#x2F;package_esp32_index.json
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;Click the “OK” button.&lt;&#x2F;li&gt;
&lt;li&gt;Open the Boards Manager. Go to Tools &amp;gt; Board &amp;gt; Boards Manager.&lt;&#x2F;li&gt;
&lt;li&gt;Search for ESP32 and press the install button for the “ESP32 by Espressif Systems”.&lt;&#x2F;li&gt;
&lt;li&gt;Once installed, select your ESP32 board in Tools &amp;gt; Board menu.&lt;&#x2F;li&gt;
&lt;li&gt;Select the appropriate Port in Tools &amp;gt; Port menu (in my case it was the &lt;code&gt;DOIT ESP32 DEVKIT V1&lt;&#x2F;code&gt;).&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Now your Arduino IDE is set up to work with ESP32.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;setting-up-the-environment&quot;&gt;Setting Up The Environment&lt;&#x2F;h3&gt;
&lt;p&gt;I&#x27;ve got my environment all sorted out with Nix and Nix Flake, and I&#x27;ve made it even easier with direnv activation. Mosquitto&#x27;s up and running smoothly on its default port 1883. &lt;code&gt;python&lt;&#x2F;code&gt; and it&#x27;s dependencies &lt;code&gt;opencv&lt;&#x2F;code&gt;,&lt;code&gt;numpy&lt;&#x2F;code&gt;,&lt;code&gt;paho-mqtt&lt;&#x2F;code&gt; and &lt;code&gt;flask&lt;&#x2F;code&gt; in a virtual environment are set up via nix flakes as well. You can look at the &lt;a href=&quot;https:&#x2F;&#x2F;nix.dev&#x2F;&quot;&gt;nix documentation&lt;&#x2F;a&gt; to know more about how it works.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;To set it up:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;I assume that nix is installed with flakes enabled on your computer.&lt;&#x2F;li&gt;
&lt;li&gt;Clone the repo and enter the environment by running &lt;code&gt;nix develop&lt;&#x2F;code&gt; or allowing &lt;code&gt;direnv&lt;&#x2F;code&gt; to do it for you if you have it installed.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;git clone https:&#x2F;&#x2F;github.com&#x2F;scientiac&#x2F;manoid
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;A MQTT server will be running as soon as you enter the environment on the default port of &lt;code&gt;1883&lt;&#x2F;code&gt; and you can check the logs using the &lt;code&gt;screen&lt;&#x2F;code&gt; command.&lt;&#x2F;li&gt;
&lt;li&gt;Change parameters to match your device and make sure everything in on point.&lt;&#x2F;li&gt;
&lt;li&gt;Run the &lt;code&gt;main.py&lt;&#x2F;code&gt; script and admire the magic.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;changing-parameters&quot;&gt;Changing Parameters&lt;&#x2F;h3&gt;
&lt;p&gt;When adjusting parameters due to dynamic changes in Wi-Fi or IP addresses, several key locations in the code need to be updated to ensure MQTT and IP camera is properly connected. Here&#x27;s a breakdown of where to make these adjustments:&lt;&#x2F;p&gt;
&lt;p&gt;In the &lt;code&gt;esp32.ino&lt;&#x2F;code&gt; file:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;const char&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; ssid &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Your_WIFI_SSID&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;const char&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; password &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Your_WIFI_Password&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;const char&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; mqtt_server &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Your_MQTT_Server_IP&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In the &lt;code&gt;main.py&lt;&#x2F;code&gt; file:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;MQTT_BROKER &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Your_MQTT_Server_IP&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# this is at the top of the document
&lt;&#x2F;span&gt;&lt;span&gt;  args&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;http:&#x2F;&#x2F;Your_IP_Camera_feed_Address&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,) &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# this is almost at the end of the document
&lt;&#x2F;span&gt;&lt;span&gt;  
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# to use a usb camera 
&lt;&#x2F;span&gt;&lt;span&gt;  args&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,), &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# this can be used and the camera may have ID other than `0` so make sure to check that
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Tuning the motors is essential because it directly impacts the robot&#x27;s movement, responsiveness, and overall efficiency. Factors such as the size, power, and weight distribution of the robot, as well as the surface it operates on, can all influence how the motors should be configured.&lt;&#x2F;p&gt;
&lt;p&gt;In the &lt;code&gt;esp32.py&lt;&#x2F;code&gt; file:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Tuning the motors
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span&gt;left_min_pwm_forward &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;110&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span&gt;left_min_pwm_backward &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;115&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span&gt;right_min_pwm_forward &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;110&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span&gt;right_min_pwm_backward &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;115&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In the &lt;code&gt;main.py&lt;&#x2F;code&gt; file (tuning PID settings):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  robot_settings &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;: {  
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Robot ID 6
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;P_left&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0.8&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;P_right&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0.8&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;P_center&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0.4&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;I_left&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0.01&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;I_right&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0.01&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;I_center&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0.01&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;D_left&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0.001&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;D_right&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0.001&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;D_center&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0.001&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;backward_speed_left&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;backward_speed_right&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;left_prev_error&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;right_prev_error&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;center_prev_error&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;dt&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0.3&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;making-the-bot&quot;&gt;Making the bot:&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;Assemble the bot following the diagram below:&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;manoid&#x2F;diagram.png&quot; alt=&quot;PIN Diagram&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;Then open the file inside the project directory on &lt;code&gt;etc&#x2F;esp32&#x2F;esp32.ino&lt;&#x2F;code&gt; on your Arduino IDE set up to work with esp32 and change the parameters to fit your environment.&lt;&#x2F;li&gt;
&lt;li&gt;And finally flash it!&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;manoid&#x2F;bot.png&quot; alt=&quot;Bot&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;You can test the bot manually by connecting to the mqtt server using an application (&lt;em&gt;like MyMQTT on android&lt;&#x2F;em&gt;) and sending values from &lt;code&gt;0&lt;&#x2F;code&gt; to &lt;code&gt;255&lt;&#x2F;code&gt; to the topics :&lt;br &#x2F;&gt;
&lt;code&gt;&#x2F;robot6_left_forward&lt;&#x2F;code&gt;&lt;br &#x2F;&gt;
&lt;code&gt;&#x2F;robot6_left_backward&lt;&#x2F;code&gt;&lt;br &#x2F;&gt;
&lt;code&gt;&#x2F;robot6_right_forward&lt;&#x2F;code&gt;&lt;br &#x2F;&gt;
&lt;code&gt;&#x2F;robot6_right_backard&lt;&#x2F;code&gt;&lt;br &#x2F;&gt;
where &lt;code&gt;0&lt;&#x2F;code&gt; being the wheels at no speed and &lt;code&gt;255&lt;&#x2F;code&gt; being the max speed&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;what-is-in-the-code&quot;&gt;What is in the code?&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;the-functions-duh&quot;&gt;The Functions, duh!&lt;&#x2F;h3&gt;
&lt;details&gt;
&lt;summary&gt;Click to expand: The Functions&lt;&#x2F;summary&gt;
&lt;p&gt;This list contains the functions involved in the robot, with each function&#x27;s purpose:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;1. &lt;code&gt;get_warped_frame(input_frame, marker_ids, PAD)&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Detects ArUco markers in the input frame.&lt;&#x2F;li&gt;
&lt;li&gt;Extracts the corners of specified markers.&lt;&#x2F;li&gt;
&lt;li&gt;Warps the frame to correct perspective if all specified markers are detected.&lt;&#x2F;li&gt;
&lt;li&gt;Returns the warped frame and marker corners.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;2. &lt;code&gt;calculate_scale(corners, marker_physical_size_cm)&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Calculates the scale of the marker in pixels per centimeter.&lt;&#x2F;li&gt;
&lt;li&gt;Uses the distance between two corners of the marker.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;3. &lt;code&gt;adjust_marker_corners(corners, offset_x_cm, offset_y_cm, adjust_width_cm, adjust_height_cm, marker_physical_size_cm)&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Adjusts the marker corners based on given offsets and size adjustments in centimeters.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;4. &lt;code&gt;detect_aruco_markers(frame, aruco_dict_type)&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Detects ArUco markers in the frame.&lt;&#x2F;li&gt;
&lt;li&gt;Processes the detected markers and adjusts corners if necessary.&lt;&#x2F;li&gt;
&lt;li&gt;Returns the detected markers with their centers and corners.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;5. &lt;code&gt;heuristic(a, b)&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Calculates the Manhattan distance between two points.&lt;&#x2F;li&gt;
&lt;li&gt;Used in pathfinding algorithms.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;6. &lt;code&gt;astar(start, goal, obstacles, grid_size)&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Implements the A* algorithm to find the shortest path from start to goal.&lt;&#x2F;li&gt;
&lt;li&gt;Considers obstacles and returns the path if found.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;7. &lt;code&gt;connect_mqtt()&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Connects to the MQTT broker to enable robot communication.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;8. &lt;code&gt;send_mqtt_command(topic, command)&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Sends a command to the robot via MQTT.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;9. &lt;code&gt;get_bot_position(bot_id, markers)&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Retrieves the current position of a robot based on its marker ID.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;10. &lt;code&gt;calculate_distances(robot_corners, next_position)&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Calculates the distances from the robot&#x27;s center and corners to the next position.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;11. &lt;code&gt;move_towards_goal(robot_id, path, threshold)&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Moves the robot towards the goal following the given path using PID control.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;12. &lt;code&gt;draw_lines_to_goal(frame, robot_corners, goal_position, color, thickness)&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Draws lines from the robot&#x27;s corners and center to the goal position on the frame.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;13. &lt;code&gt;draw_path(frame, path, color, thickness, grid_size)&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Draws the planned path on the frame.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;14. &lt;code&gt;get_head_position(robot_id, markers)&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Returns the head position and corners of the robot based on its marker ID.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;15. &lt;code&gt;get_waste_positions(markers, waste_id)&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Filters and returns the positions of a specific type of waste.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;16. &lt;code&gt;fill_grid_cells_from_corners(corners, grid_size)&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Returns all grid cells covered by a rectangle defined by its corners.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;17. &lt;code&gt;update_obstacles(markers, target_waste_ids, robot_head_pos)&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Updates the list of obstacles and finds the nearest waste position.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;18. &lt;code&gt;convert_to_grid_coordinates(position, cell_size)&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Converts a position to grid coordinates based on the cell size.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;19. &lt;code&gt;convert_obstacles_to_grid(obstacles, cell_size)&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Converts a set of positions to grid coordinates.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;20. &lt;code&gt;convert_grid_to_actual(path, cell_size)&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Converts a path of grid coordinates back to actual coordinates.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;21. &lt;code&gt;plan_path(start, goal, obstacles)&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Plans a path using the A* algorithm and returns it in actual coordinates.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;22. &lt;code&gt;find_nearest_edge_midpoint_to_robot(robot_pos, marker_id, markers)&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Finds the nearest edge midpoint of a marker relative to the robot&#x27;s position.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;23. &lt;code&gt;pickup_waste(robot_id)&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Sends a command to the robot to pick up the waste.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;24. &lt;code&gt;drop_off_waste(robot_id, waste_id)&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Sends a command to the robot to drop off the waste and marks it as processed.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;25. &lt;code&gt;robot_control_loop(robot_id)&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Main control loop for the robot:
&lt;ul&gt;
&lt;li&gt;Connects to MQTT.&lt;&#x2F;li&gt;
&lt;li&gt;Detects waste, navigates to it, picks it up, and drops it off.&lt;&#x2F;li&gt;
&lt;li&gt;Repeats the process continuously.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;26. &lt;code&gt;capture_and_update_shared_resources(url)&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Continuously captures video frames.&lt;&#x2F;li&gt;
&lt;li&gt;Detects markers and updates shared resources with the frame and markers.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;27. &lt;code&gt;visualize_robot_behavior()&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Visualizes the robot&#x27;s current behavior on the frame.&lt;&#x2F;li&gt;
&lt;li&gt;Draws the robot&#x27;s position, planned path, obstacles, and goal on the frame.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;details&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;manoid&#x2F;functions.svg&quot; alt=&quot;functions&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;finally&quot;&gt;Finally&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;testing&quot;&gt;Testing&lt;&#x2F;h3&gt;
&lt;p&gt;To test only the &lt;code&gt;main.py&lt;&#x2F;code&gt; file for it&#x27;s pathfinding capabilities, you can run the &lt;code&gt;.&#x2F;pngstream.py&lt;&#x2F;code&gt; file in the &lt;code&gt;etc&lt;&#x2F;code&gt; directory and put &lt;code&gt;http:&#x2F;&#x2F;127.0.0.1:5000&#x2F;video_feed&lt;&#x2F;code&gt; on the following placeholder in &lt;code&gt;main.py&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    args&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;http:&#x2F;&#x2F;Your_IP_Camera_feed_Address&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,) &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# this is almost at the end of the document
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and then run &lt;code&gt;main.py&lt;&#x2F;code&gt;. This will open up a window with the png showing the detected path in the screen along with detecting all the ArUco markers. If only the markers are detected and the path doesn&#x27;t show up, it can be assumed that the code isn&#x27;t working corrctly.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;I suggest testing this way as soon as nix finishes setting the environment and keep testing the code like this to minimize the need to test it physically.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;troubleshooting-common-issues&quot;&gt;Troubleshooting Common Issues&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Connection Problems: If the robot fails to connect to the MQTT broker, double-check your Wi-Fi credentials and ensure the broker&#x27;s IP address is correct in both the ESP32 firmware and main.py. (The main.py script will print errors if something isn&#x27;t properly connected.)&lt;&#x2F;li&gt;
&lt;li&gt;Movement Issues: If the robot&#x27;s movements are erratic or it doesn&#x27;t move as expected, recheck the motor connections and ensure the PWM values are correctly tuned in &lt;code&gt;main.py&lt;&#x2F;code&gt; and &lt;code&gt;esp32.ino&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Marker Detection Failures: If the robot cannot detect ArUco markers, ensure the camera feed is clear and unobstructed. Adjust the camera&#x27;s focus and lighting conditions to improve detection accuracy.&quot;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;possible-improvements&quot;&gt;Possible Improvements&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;In my pathfinding algorithm, I don&#x27;t search for the diagonal paths which lengthens the &quot;short path&quot; as I wanted the robot to face &lt;code&gt;the waste&lt;&#x2F;code&gt; or &lt;code&gt;the destination&lt;&#x2F;code&gt; from either sides of the square and not the corners.&lt;&#x2F;li&gt;
&lt;li&gt;Making swarm robots instead of using only one.&lt;&#x2F;li&gt;
&lt;li&gt;Making the code object-oriented.&lt;&#x2F;li&gt;
&lt;li&gt;Adding grippers to grab the waste instead of the 5-second delay and drop the waste on its destination.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;We had added the functionalities of gripping and swarm navigation when using this bot on a Robotics Competition in Nepal called &lt;code&gt;Yantra Swarmanoid&lt;&#x2F;code&gt; but decided to remove it on this showcase, though the code to grab and drop the waste is still in there in &#x27;main.py&#x27;.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Manoid: Communication</title>
        <published>2023-12-31T00:00:00+00:00</published>
        <updated>2023-12-31T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              scientiac
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://scientiac.space/blog/esp-mosquitto/"/>
        <id>https://scientiac.space/blog/esp-mosquitto/</id>
        
        <content type="html" xml:base="https://scientiac.space/blog/esp-mosquitto/">&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;manoid&#x2F;led_esp.jpg&quot; alt=&quot;Esp with Led&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;&#x2F;h2&gt;
&lt;p&gt;Building a clueless robot isn&#x27;t an easy task and I am only in the beginning of it. This report will discuss on how to setup the microcontroller boards and how the communication will work for project &lt;code&gt;manoid&lt;&#x2F;code&gt; (A waste management robot). Also, the much difficult image processing and mapping is on the way, which I should be working on instead of writing this but I&#x27;ll leave that for next year. Communication seems like a simple topic to work on for now.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note :&lt;&#x2F;strong&gt; &lt;em&gt;I wrote the code for the bot &lt;a href=&quot;&#x2F;blog&#x2F;yantra-bot&#x2F;&quot;&gt;manoid&lt;&#x2F;a&gt; in arduino&#x27;s &#x27;.ino&#x27; instead of using micropython&#x27;s &#x27;.py&#x27; but micropython can be used to do the same as well.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;requirements&quot;&gt;Requirements:&lt;&#x2F;h3&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;strong&gt;Category&lt;&#x2F;strong&gt;&lt;&#x2F;th&gt;&lt;th&gt;&lt;strong&gt;Component&lt;&#x2F;strong&gt;&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;Hardware&lt;&#x2F;td&gt;&lt;td&gt;ESP8266 Microcontroller&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Firmware&lt;&#x2F;td&gt;&lt;td&gt;MicroPython (for receiving)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Software&lt;&#x2F;td&gt;&lt;td&gt;Python (for publishing)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Software&lt;&#x2F;td&gt;&lt;td&gt;esptool&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Software&lt;&#x2F;td&gt;&lt;td&gt;mosquitto (for serving)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Software&lt;&#x2F;td&gt;&lt;td&gt;adafruit-ampy&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h2 id=&quot;basic-setup&quot;&gt;Basic Setup&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;flashing-firmware&quot;&gt;Flashing Firmware&lt;&#x2F;h3&gt;
&lt;p&gt;Micropython is an implementation of Python 3 that includes a small subset of the Python standard library and is optimised to run on microcontrollers and in constrained environments. The microcontroller I am using is the ESP8266 (NodeMCU). Flashing it with micropython was easy (for me), I&#x27;ve been flashing things since years. It goes like this:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Install &lt;code&gt;esptool&lt;&#x2F;code&gt; and erase flash your ESP8266 first.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;blockquote&gt;
&lt;p&gt;You should first confirm that &#x2F;dev&#x2F;ttyUSB0 is your device which you want to flash &lt;code&gt;micropython&lt;&#x2F;code&gt; on.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;esptool.py --port &#x2F;dev&#x2F;ttyUSB0 erase_flash
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;Then flash the &lt;a href=&quot;https:&#x2F;&#x2F;micropython.org&#x2F;download&#x2F;ESP8266_GENERIC&#x2F;&quot;&gt;latest firmware&lt;&#x2F;a&gt; of ESP8266.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;esptool.py --port &#x2F;dev&#x2F;ttyUSB0 --baud 460800 write_flash --flash_size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;detect 0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;path to the .bin file (firmware&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The default flashing mode worked on my first &lt;code&gt;ESP8266&lt;&#x2F;code&gt; but when I tried to flash it to another &lt;code&gt;ESP8266&lt;&#x2F;code&gt; it flashes successfully but didn&#x27;t let me access the repl. So, I had to set the flashing mode to &lt;code&gt;dout&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;esptool.py --port &#x2F;dev&#x2F;ttyUSB0 --baud 460800 write_flash --flash_size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;detect --flash_mode dout 0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;path to the .bin file (firmware&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;Check if everything is working by connecting to the &lt;code&gt;micropython repl&lt;&#x2F;code&gt;. You can use &lt;code&gt;screen&lt;&#x2F;code&gt; or &lt;code&gt;tmux&lt;&#x2F;code&gt; or your own solution to connect to the &lt;code&gt;repl&lt;&#x2F;code&gt;. Here is how you can use screen:&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;screen &#x2F;dev&#x2F;ttyUSB0 115200
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The above command gives you a blank screen, when you hit enter you&#x27;ll get the prompt, type &lt;code&gt;help&lt;&#x2F;code&gt; and hit enter. This should show up:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;manoid&#x2F;repl.png&quot; alt=&quot;repl&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;mqtt&quot;&gt;MQTT&lt;&#x2F;h3&gt;
&lt;p&gt;I am sure you played with the &lt;code&gt;repl&lt;&#x2F;code&gt; and now it&#x27;s time to push some scripts to run in it. For now we will focus on using &lt;code&gt;MQTT&lt;&#x2F;code&gt; protocol to transfer data from one machine to another.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;an-overview-of-how-mqtt-works&quot;&gt;An overview of how MQTT works&lt;&#x2F;h4&gt;
&lt;ol&gt;
&lt;li&gt;A MQTT client establishes a connection with the MQTT broker.&lt;&#x2F;li&gt;
&lt;li&gt;Once connected, the client can either publish messages, subscribe to specific messages, or do both.&lt;&#x2F;li&gt;
&lt;li&gt;When the MQTT broker receives a message, it forwards it to subscribers who are interested.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;blockquote&gt;
&lt;p&gt;Here, &lt;strong&gt;server&lt;&#x2F;strong&gt; will be &lt;code&gt;mosquitto&lt;&#x2F;code&gt; running on the computer &lt;strong&gt;publisher&lt;&#x2F;strong&gt; will be the &lt;code&gt;python script&lt;&#x2F;code&gt; on the computer and &lt;strong&gt;subscriber&lt;&#x2F;strong&gt; will be the &lt;code&gt;ESP8266&lt;&#x2F;code&gt; running micropython. [Message will be sent from python script through mosquitto server to ESP8266]&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h4 id=&quot;mosquitto&quot;&gt;Mosquitto&lt;&#x2F;h4&gt;
&lt;p&gt;To set the mosquitto server first we should allow port &lt;code&gt;1883&lt;&#x2F;code&gt; on your firewall. I am using a custom configuration file for now. So, make a file named &lt;code&gt;mosquitto.conf&lt;&#x2F;code&gt; and put the following lines to allow all connections:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282828;color:#fdf4c1aa;&quot;&gt;&lt;code&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    listener 1883
&lt;&#x2F;span&gt;&lt;span&gt;    allow_anonymous true
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;then run the server by the following command:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;mosquitto -c .&#x2F;mosquitto.conf
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is how it&#x27;ll look when a client named &lt;code&gt;tesseraclient&lt;&#x2F;code&gt; connects to the server:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;manoid&#x2F;mosquitto.png&quot; alt=&quot;mosquitto&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;pushing-scripts-to-the-microcontroller&quot;&gt;Pushing Scripts to the Microcontroller&lt;&#x2F;h3&gt;
&lt;p&gt;There are two important files that MicroPython looks for in the root of its filesystem.  These files contain MicroPython code that will be executed whenever the board is powered up or reset (i.e. it &#x27;boots&#x27;).  These files are:&lt;&#x2F;p&gt;
&lt;h4 id=&quot;boot-py&quot;&gt;boot.py&lt;&#x2F;h4&gt;
&lt;p&gt;This file is run first on power up&#x2F;reset and should contain low-level code that sets up the board to finish booting.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;main-py&quot;&gt;main.py&lt;&#x2F;h4&gt;
&lt;p&gt;If this file exists it&#x27;s run after boot.py and should contain any main script that you want to run when the board is powered up or reset.&lt;&#x2F;p&gt;
&lt;p&gt;To push the scripts I am using &lt;code&gt;adafruit-ampy&lt;&#x2F;code&gt; but the official way to push files is using their &lt;a href=&quot;https:&#x2F;&#x2F;learn.adafruit.com&#x2F;micropython-basics-esp8266-webrepl&#x2F;access-webrepl&quot;&gt;webrepl&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Using ampy you can push scripts with the following command:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ampy -p &#x2F;dev&#x2F;ttyUSB0 put &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;filename.py&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;programming&quot;&gt;Programming&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;publisher&quot;&gt;Publisher&lt;&#x2F;h3&gt;
&lt;p&gt;Firstly a python script on the computer to send messages, it sends &lt;code&gt;on&lt;&#x2F;code&gt; and &lt;code&gt;off&lt;&#x2F;code&gt; in the interval of 500ms with topic &lt;code&gt;led&lt;&#x2F;code&gt; to the mosquitto server:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;py&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-py &quot;&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;time
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;paho.mqtt.client &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span&gt;mqtt
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;BROKER_ADDRESS&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;000.000.00.00 &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# IP address of the device running the mosquitto server
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;on_connect&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;client&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;userdata&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;flags&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;rc&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;rc &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Connected to broker&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Connection failed with code&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;, rc)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;on_disconnect&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;client&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;userdata&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;rc&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Disconnected from broker&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;establish_connection&lt;&#x2F;span&gt;&lt;span&gt;():
&lt;&#x2F;span&gt;&lt;span&gt;        client_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;tesserver&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        client &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;mqtt.Client(client_id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;client_id)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        client.on_connect &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;on_connect
&lt;&#x2F;span&gt;&lt;span&gt;        client.on_disconnect &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;on_disconnect
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;client.connect(BROKER_ADDRESS, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;1883&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;60&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;client
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    led_topic &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;led&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    client &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;establish_connection()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;client.publish(led_topic, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;off&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;time.sleep(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;500&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;client.publish(led_topic, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;off&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;time.sleep(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;500&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;subscriber&quot;&gt;Subscriber&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;boot-py-1&quot;&gt;boot.py&lt;&#x2F;h4&gt;
&lt;p&gt;This will start when I plug the esp to the power supply. No need to connect via &lt;code&gt;webrepl&lt;&#x2F;code&gt; and start manually. Generally it&#x27;s not recommended to touch the &lt;code&gt;boot.py&lt;&#x2F;code&gt; file. &lt;code&gt;main.py&lt;&#x2F;code&gt; should be used instead but this is I who programming the microcontroller so &lt;code&gt;boot.py&lt;&#x2F;code&gt; it is.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;py&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-py &quot;&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;esp
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;os, machine
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;gc
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;webrepl
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;webrepl.start()
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;gc.collect()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;network
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;time
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;machine
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Wi-Fi configuration
&lt;&#x2F;span&gt;&lt;span&gt;    ssid &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=  &lt;&#x2F;span&gt;&lt;span&gt;abcdef &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;#WIFI_SSID
&lt;&#x2F;span&gt;&lt;span&gt;    password &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;12345678 &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;#WIFI_PASSWORD
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Function to connect to Wi-Fi
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;connect_wifi&lt;&#x2F;span&gt;&lt;span&gt;():
&lt;&#x2F;span&gt;&lt;span&gt;        wlan &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;network.WLAN(network.STA_IF)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;wlan.active(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;True&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;not &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;wlan.isconnected()&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Connecting to WiFi...&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;wlan.connect(ssid, password)
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# wlan.connect(ssid)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;not &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;wlan.isconnected()&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;time.sleep(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Connected to WiFi&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Connect to Wi-Fi
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;connect_wifi()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Check if Wi-Fi connection is successful before executing mqtt.py
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;network.WLAN(network.STA_IF).isconnected()&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Execute mqtt.py
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;try&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;mqtt  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Replace &amp;#39;mqtt&amp;#39; with the actual name of your Python script
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;except &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Exception &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span&gt;e:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Error executing mqtt.py:&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;, e)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;mqtt-py&quot;&gt;mqtt.py&lt;&#x2F;h4&gt;
&lt;p&gt;Upon connecting to the WIFI successfully the above script will import this file and things magically happen.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;py&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-py &quot;&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;machine
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;umqtt.simple &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;MQTTClient
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;time
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;secrets &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;BROKER_ADDRESS
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# MQTT configuration
&lt;&#x2F;span&gt;&lt;span&gt;    client_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;teserraclient&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    broker_address &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;000.000.00.00 &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# IP address of the device running the mosquitto server
&lt;&#x2F;span&gt;&lt;span&gt;    led_topic &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;led&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# LED Pin
&lt;&#x2F;span&gt;&lt;span&gt;    led_pin &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;machine.Pin(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;15&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;, machine.Pin.OUT)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;connect_mqtt&lt;&#x2F;span&gt;&lt;span&gt;():
&lt;&#x2F;span&gt;&lt;span&gt;        c &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;MQTTClient(client_id, broker_address)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;c.set_callback(callback)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;True&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;try&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;c.connect(clean_session&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;False&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Connected to MQTT broker.&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;c.subscribe(led_topic)
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;c
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;except &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;OSError &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span&gt;e:
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Connection error: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{e}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Retrying in 5 seconds...&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;time.sleep(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;callback&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;topic&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;msg&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Received message on topic &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{topic.decode(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;#39;utf-8&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;)}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{msg.decode(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;#39;utf-8&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;)}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;topic &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span&gt;led_topic:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;msg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;on&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Turning on the LED&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;led_pin.on()
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;elif &lt;&#x2F;span&gt;&lt;span&gt;msg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;off&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Turning off the LED&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;led_pin.off()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    mqtt_client &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;connect_mqtt()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;mqtt_client:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Waiting for messages...&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;True&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;try&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;mqtt_client.wait_msg()
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;except &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;OSError &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span&gt;e:
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Error: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{e}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Reconnecting...&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;                mqtt_client &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;connect_mqtt()
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;not &lt;&#x2F;span&gt;&lt;span&gt;mqtt_client:
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;break
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;finally&quot;&gt;Finally&lt;&#x2F;h3&gt;
&lt;p&gt;If everything works after installing all the python dependencies you will see this if you are supplying power to your microcontroller using a computer that can accept serial in upon doing a soft reboot and running your python (publisher) script from your computer.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;manoid&#x2F;working.png&quot; alt=&quot;final&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This indicates that the publisher i.e. &lt;code&gt;python script&lt;&#x2F;code&gt; has connected to the server i.e. &lt;code&gt;mosquitto&lt;&#x2F;code&gt; and is now sending &lt;code&gt;on&lt;&#x2F;code&gt; and &lt;code&gt;off&lt;&#x2F;code&gt; messages to the server with topic &lt;code&gt;led&lt;&#x2F;code&gt; which then is sent to the subscriber i.e. &lt;code&gt;ESP8266&lt;&#x2F;code&gt; which is interpreted by the microcontroller as a command to enable and disable the set GPIO pin i.e. pin &lt;code&gt;15&lt;&#x2F;code&gt; if you look closely at the code.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Droidian: Linux Smartphone Experience</title>
        <published>2023-11-30T00:00:00+00:00</published>
        <updated>2023-11-30T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              scientiac
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://scientiac.space/blog/droidian/"/>
        <id>https://scientiac.space/blog/droidian/</id>
        
        <content type="html" xml:base="https://scientiac.space/blog/droidian/">&lt;h2 id=&quot;my-device&quot;&gt;My Device&lt;&#x2F;h2&gt;
&lt;pre style=&quot;background-color:#282828;color:#fdf4c1aa;&quot;&gt;&lt;code&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            #####           scientiac@mobius
&lt;&#x2F;span&gt;&lt;span&gt;           #######          ---------------
&lt;&#x2F;span&gt;&lt;span&gt;           ##O#O##          OS: Droidian trixie aarch64
&lt;&#x2F;span&gt;&lt;span&gt;           #######          Host: wcd937x Audio Codec AB IDP EXCALIBUR
&lt;&#x2F;span&gt;&lt;span&gt;         ###########        Kernel: 4.14-288-xiaomi-miatoll
&lt;&#x2F;span&gt;&lt;span&gt;        #############       Uptime: 1 hour, 40 mins
&lt;&#x2F;span&gt;&lt;span&gt;       ###############      Packages: 1945 (dpkg), 390 (nix-user), 47 (nix-default), 28 (flatpak)
&lt;&#x2F;span&gt;&lt;span&gt;       ################     Shell: bash 5.2.15
&lt;&#x2F;span&gt;&lt;span&gt;      #################     Resolution: 1080x2400x60x164823
&lt;&#x2F;span&gt;&lt;span&gt;    #####################   DE: GNOME (actually &amp;#39;phosh&amp;#39;)
&lt;&#x2F;span&gt;&lt;span&gt;    #####################   WM: weston (actually &amp;#39;phoc&amp;#39;)
&lt;&#x2F;span&gt;&lt;span&gt;      #################     Theme: adw-gtk3 [GTK2&#x2F;3]
&lt;&#x2F;span&gt;&lt;span&gt;                            Icons: Papirus [GTK2&#x2F;3]
&lt;&#x2F;span&gt;&lt;span&gt;                            Terminal: kgx
&lt;&#x2F;span&gt;&lt;span&gt;                            CPU: Qualcomm SM7125 (8) @ 1.804GHz
&lt;&#x2F;span&gt;&lt;span&gt;                            Memory: 2370MiB &#x2F; 5587MiB
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    * neofetch gathered some false data so i have manually edited this text blob.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;firstly&quot;&gt;Firstly...&lt;&#x2F;h2&gt;
&lt;p&gt;I have been playing around and testing Droidian on my &lt;em&gt;Xaomi Redmi Note 9 Pro Max (miatoll - excalibur)&lt;&#x2F;em&gt; as a daily driver since November 17th. Before this I had tried Droidian about a year ago on this very device.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: The screenshots attached here are of my customized version of phosh and GTK colors, the default UI will look different.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;div class=&quot;gallery&quot; style=&quot;display:flex; flex-wrap: wrap;&quot;&gt;
  &lt;img src=&quot;&#x2F;images&#x2F;droidian&#x2F;lockscreen.png&quot; style=&quot;width: 15rem; padding:1rem;border-radius: 1.75rem;&quot;&gt;
  &lt;img src=&quot;&#x2F;images&#x2F;droidian&#x2F;overview.png&quot; style=&quot;width: 15rem; padding:1rem;border-radius: 1.75rem;&quot;&gt;
&lt;&#x2F;div&gt;
&lt;h3 id=&quot;a-quick-then-v-s-now&quot;&gt;A quick THEN v&#x2F;s NOW&lt;&#x2F;h3&gt;
&lt;p&gt;Then, the UI was not tailored for the device I was using, it was vanilla phosh with clock in the center of the bar which was covered by the punch-hole of my device and the notification panel was also not aligned correctly to the device. Now, it&#x27;s fine and the UI is just how it should be for the device.&lt;&#x2F;p&gt;
&lt;div class=&quot;gallery&quot; style=&quot;display:flex; flex-wrap: wrap;&quot;&gt;
  &lt;img src=&quot;&#x2F;images&#x2F;droidian&#x2F;old_tele.png&quot; style=&quot;width: 15rem; padding:1rem;border-radius: 1.75rem;&quot;&gt;
  &lt;img src=&quot;&#x2F;images&#x2F;droidian&#x2F;new_tele.png&quot; style=&quot;width: 15rem; padding:1rem;border-radius: 1.75rem;&quot;&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Then, The Camera was not working at all. Now, the &lt;code&gt;droidian-camera&lt;&#x2F;code&gt; does work but it&#x27;s laggy. Though it technically can capture videos the frame rate drops very randomly and the video comes out to be choppy. The file size of the choppy video is also very high.&lt;&#x2F;p&gt;
&lt;p&gt;Then, Apps like telegram and messenger from Firefox did not connect to calls at all. Now, microphone is generally supported by all apps and voice calling via other apps work fine.&lt;&#x2F;p&gt;
&lt;p&gt;Then, Waydroid used to work without much problems. Now, upon launching Waydroid and trying to video-call the entire shell crashes and the only way to bring back the UI is by a forced restart.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;experience&quot;&gt;Experience&lt;&#x2F;h2&gt;
&lt;p&gt;Gnome Asia 2023 is starting Tomorrow, I travelled from Dharan to Kathmandu with Droidian on my phone and it feels like I am handicapped using this device coming from android.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;voice-calls&quot;&gt;Voice Calls&lt;&#x2F;h3&gt;
&lt;p&gt;Since it is a phone it should be able to make calls and it does. Though my device supports two SIMs, droidian on my device only detects and uses one so, I had to let go of my secondary SIM.&lt;&#x2F;p&gt;
&lt;img alt=&quot;Gnome Calls&quot; src=&quot;&#x2F;images&#x2F;droidian&#x2F;call_dialing.png&quot; style=&quot;width: 15rem;&quot;&#x2F;&gt;
&lt;h3 id=&quot;notifications&quot;&gt;Notifications&lt;&#x2F;h3&gt;
&lt;p&gt;Apps should be running in the background to be able to make notifications, and the other thing is I am not notified with sound or vibration of any of my texts messages be it from apps like &lt;code&gt;fractal&lt;&#x2F;code&gt;, &lt;code&gt;nheko&lt;&#x2F;code&gt;, &lt;code&gt;telegram-desktop&lt;&#x2F;code&gt; or even &lt;code&gt;gnome-messages&lt;&#x2F;code&gt; even if the app is running in the background when the screen is off.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;gnome-calls&lt;&#x2F;code&gt; app is the only app I know which can make &quot;noisy notifications&quot; when my phone is locked and the screen is off. So, I only know if anyone is calling me on my number but nothing if they use any other platform.&lt;&#x2F;p&gt;
&lt;img alt=&quot;Notification&#x2F; Quick Settings Panel&quot; src=&quot;&#x2F;images&#x2F;droidian&#x2F;notif_panel.png&quot; style=&quot;width: 15rem;&quot;&#x2F;&gt;
&lt;h3 id=&quot;maps&quot;&gt;Maps&lt;&#x2F;h3&gt;
&lt;p&gt;Yes, Gnome Maps works on this device but it does not show my real time location. And coming from using Google Maps, it isn&#x27;t a very pleasant of an experience.&lt;&#x2F;p&gt;
&lt;img alt=&quot;Gnome Maps&quot; src=&quot;&#x2F;images&#x2F;droidian&#x2F;gnome_maps.png&quot; style=&quot;width: 15rem;&quot;&#x2F;&gt;
&lt;h3 id=&quot;waydroid&quot;&gt;Waydroid&lt;&#x2F;h3&gt;
&lt;p&gt;The waydroid experience was buggy when used in the default condition but it worked fine under a nested &lt;code&gt;weston&lt;&#x2F;code&gt; session. But, &lt;code&gt;weston&lt;&#x2F;code&gt; comes with a drawback. The resolution when used in the default &lt;code&gt;phoc&lt;&#x2F;code&gt; is great everything looks crisp but when used in a nested &lt;code&gt;weston&lt;&#x2F;code&gt; session the resolution is low and it&#x27;s only usable. At least waydroid doesn&#x27;t crash the whole phoc session when used inside the nested &lt;code&gt;weston&lt;&#x2F;code&gt; session.&lt;&#x2F;p&gt;
&lt;p&gt;The first image below is with 400dpi (in default &lt;code&gt;phoc&lt;&#x2F;code&gt; session) whereas the second one is on 1700dpi (in &lt;code&gt;weston&lt;&#x2F;code&gt; session) set from android developer settings.&lt;&#x2F;p&gt;
&lt;div class=&quot;gallery&quot; style=&quot;display:flex; flex-wrap: wrap;&quot;&gt;
  &lt;img src=&quot;&#x2F;images&#x2F;droidian&#x2F;waydroid_phoc.png&quot; style=&quot;width: 15rem; padding:1rem;border-radius: 1.75rem;&quot;&gt;
  &lt;img src=&quot;&#x2F;images&#x2F;droidian&#x2F;waydroid_weston.png&quot; style=&quot;width: 15rem; padding:1rem;border-radius: 1.75rem;&quot;&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Though &lt;code&gt;gnome-maps&lt;&#x2F;code&gt; do not show real time location, google maps from waydroid is able to do it. But, it requires some time to load everything.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;web-browsing&quot;&gt;Web Browsing&lt;&#x2F;h3&gt;
&lt;p&gt;Web browsing is fine in droidian. Firefox with a mobile focused custom layout is the default browser. There are some glitches here and there on firefox caused by the inability to adapt to a mobile form but normal day to day browsing can be done nicely. Various websites, Facebook, Instagram, YouTube, everything works fine but not as smooth as using on desktop or android and it is expected because I am technically running a whole desktop application on a smartphone.&lt;&#x2F;p&gt;
&lt;img alt=&quot;Youtube on Firefox&quot; src=&quot;&#x2F;images&#x2F;droidian&#x2F;firefox_yt.png&quot; style=&quot;width: 15rem;&quot;&#x2F;&gt;
&lt;p&gt;The desktop extensions work fine, but the UI to edit them from their window glitches on my device. So, the extensions which work by default work the best.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;social-media-and-messaging&quot;&gt;Social Media and Messaging&lt;&#x2F;h3&gt;
&lt;p&gt;Well, mastodon is my favourite social media ever and &lt;code&gt;Tuba&lt;&#x2F;code&gt; is a dedicated app from flathub which works more than fine for it. YouTube, Facebook and Instagram can be used from the Firefox browser. For communication, &lt;code&gt;telegram-desktop&lt;&#x2F;code&gt; works fine, so does &lt;code&gt;Nheko&lt;&#x2F;code&gt; for matrix supporting voice calls as well, other matrix clients like &lt;code&gt;Fractal&lt;&#x2F;code&gt; work too. And there always are web based clients that work in responsive mode.&lt;&#x2F;p&gt;
&lt;div class=&quot;gallery&quot; style=&quot;display:flex; flex-wrap: wrap;&quot;&gt;
  &lt;img src=&quot;&#x2F;images&#x2F;droidian&#x2F;masto_pan.png&quot; style=&quot;width: 15rem; padding:1rem;border-radius: 1.75rem;&quot;&gt;
  &lt;img src=&quot;&#x2F;images&#x2F;droidian&#x2F;masto_home.png&quot; style=&quot;width: 15rem; padding:1rem;border-radius: 1.75rem;&quot;&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;It&#x27;s not always gtk apps, qt apps are convergent too; &lt;code&gt;telegram-desktop&lt;&#x2F;code&gt; and &lt;code&gt;nheko&lt;&#x2F;code&gt; are two examples. They are the only &quot;apps&quot; which support voice calls natively and even video calls if it detects a camera (it doesn&#x27;t in mine).&lt;&#x2F;p&gt;
&lt;div class=&quot;gallery&quot; style=&quot;display:flex; flex-wrap: wrap;&quot;&gt;
  &lt;img src=&quot;&#x2F;images&#x2F;droidian&#x2F;nheko.png&quot; style=&quot;width: 15rem; padding:1rem;border-radius: 1.75rem;&quot;&gt;
  &lt;img src=&quot;&#x2F;images&#x2F;droidian&#x2F;fractal.png&quot; style=&quot;width: 15rem; padding:1rem;border-radius: 1.75rem;&quot;&gt;
&lt;&#x2F;div&gt;
&lt;h3 id=&quot;file-sharing&quot;&gt;File Sharing&lt;&#x2F;h3&gt;
&lt;p&gt;Sharing files is surprisingly important in our day-to-day life. Since it is a whole Linux system &lt;code&gt;ssh&lt;&#x2F;code&gt; can be used to transfer and receive files as well as modify it remotely. For a more GUI approach the best way to share files from any kind of device is the &lt;code&gt;magic-wormhole&lt;&#x2F;code&gt; protocol. And &lt;code&gt;warp&lt;&#x2F;code&gt; being the GTK convergent app for Droidian, it has made my life a lot easier.&lt;&#x2F;p&gt;
&lt;div class=&quot;gallery&quot; style=&quot;display:flex; flex-wrap: wrap;&quot;&gt;
  &lt;img src=&quot;&#x2F;images&#x2F;droidian&#x2F;warp_home.png&quot; style=&quot;width: 15rem; padding:1rem;border-radius: 1.75rem;&quot;&gt;
  &lt;img src=&quot;&#x2F;images&#x2F;droidian&#x2F;warp_send.png&quot; style=&quot;width: 15rem; padding:1rem;border-radius: 1.75rem;&quot;&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;I am writing this blog on my laptop while taking screenshots from my phone and sending them to my laptop using warp.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;customization&quot;&gt;Customization&lt;&#x2F;h2&gt;
&lt;p&gt;The thing that introduced Linux to me and made it interesting was the customizability of it. I encountered Linux when YouTube recommended a video of KDE while I was searching for ways to customize windows. So, you can pretty much assume that I don&#x27;t use things without giving some of my touch to it.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;colors-and-textures&quot;&gt;Colors and Textures&lt;&#x2F;h3&gt;
&lt;p&gt;As I have mentioned before, the screenshots attached here are of my customized version of phosh and GTK colors. So, since it is basically a GTK environment, &lt;code&gt;gradience&lt;&#x2F;code&gt; works like a charm for changing the color palette of the apps. And for the phosh shell, some custom &lt;code&gt;gtk.css&lt;&#x2F;code&gt; on &lt;code&gt;~&#x2F;.config&#x2F;gtk-3.0&#x2F;&lt;&#x2F;code&gt; will do the trick.&lt;&#x2F;p&gt;
&lt;p&gt;Here, I am using the &lt;code&gt;gruvbox&lt;&#x2F;code&gt; theme to customize my shell.&lt;&#x2F;p&gt;
&lt;div class=&quot;gallery&quot; style=&quot;display:flex; flex-wrap: wrap;&quot;&gt;
  &lt;img src=&quot;&#x2F;images&#x2F;droidian&#x2F;gradience.png&quot; style=&quot;width: 15rem; padding:1rem;border-radius: 1.75rem;&quot;&gt;
  &lt;img src=&quot;&#x2F;images&#x2F;droidian&#x2F;gradience_css.png&quot; style=&quot;width: 15rem; padding:1rem;border-radius: 1.75rem;&quot;&gt;
&lt;&#x2F;div&gt;
&lt;pre data-lang=&quot;css&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-css &quot;&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#fa5c4b;&quot;&gt;phosh-home&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;, .phosh-overview, &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#fa5c4b;&quot;&gt;phosh-app-grid &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;background-color&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;#282828&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;* gruvbox primary color *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#fa5c4b;&quot;&gt;phosh-top-panel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#fa5c4b;&quot;&gt;phosh-lockscreen&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;, .phosh-lockshield &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;background-image&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;url&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;#39;file:&#x2F;&#x2F;&#x2F;home&#x2F;droidian&#x2F;Desktop&#x2F;image.png&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;* a blurred version of wallpaper or any preferred image *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;background-size&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;cover&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;background-position&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;center&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;shell-tweaks&quot;&gt;Shell Tweaks&lt;&#x2F;h3&gt;
&lt;p&gt;Changing icons, showing battery percentage in the bar, setting themes enabling Application filter, everything was done with an app called &lt;code&gt;postmarketos-tweaks&lt;&#x2F;code&gt; which I compiled from the source.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282828;color:#fdf4c1aa;&quot;&gt;&lt;code&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    https:&#x2F;&#x2F;gitlab.com&#x2F;postmarketOS&#x2F;postmarketos-tweaks
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;div class=&quot;gallery&quot; style=&quot;display:flex; flex-wrap: wrap;&quot;&gt;
  &lt;img src=&quot;&#x2F;images&#x2F;droidian&#x2F;pmos.png&quot; style=&quot;width: 15rem; padding:1rem;border-radius: 1.75rem;&quot;&gt;
  &lt;img src=&quot;&#x2F;images&#x2F;droidian&#x2F;pmos_phosh.png&quot; style=&quot;width: 15rem; padding:1rem;border-radius: 1.75rem;&quot;&gt;
&lt;&#x2F;div&gt;
&lt;h3 id=&quot;scaling&quot;&gt;Scaling&lt;&#x2F;h3&gt;
&lt;p&gt;The default scale is good for the eyes but for me it was a bit too big. I wanted more stuff on this small screen of my phone. For that I went to &lt;code&gt;&#x2F;etc&#x2F;phosh&#x2F;phoc.ini&lt;&#x2F;code&gt; and set the following:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282828;color:#fdf4c1aa;&quot;&gt;&lt;code&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    [output:HWCOMPOSER-1]
&lt;&#x2F;span&gt;&lt;span&gt;    scale = 2.5
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;finally&quot;&gt;Finally...&lt;&#x2F;h2&gt;
&lt;p&gt;The whole Linux ecosystem isn&#x27;t convergent yet, and many apps go beyond the screen resulting in hidden buttons and texts. To tackle that problem, Droidian comes with &lt;code&gt;Mobile Settings&lt;&#x2F;code&gt; that helps to scale down particular apps so that they fit on the screen.&lt;&#x2F;p&gt;
&lt;div class=&quot;gallery&quot; style=&quot;display:flex; flex-wrap: wrap;&quot;&gt;
  &lt;img src=&quot;&#x2F;images&#x2F;droidian&#x2F;mobile_settings.png&quot; style=&quot;width: 15rem; padding:1rem;border-radius: 1.75rem;&quot;&gt;
  &lt;img src=&quot;&#x2F;images&#x2F;droidian&#x2F;mobile_settings_comp.png&quot; style=&quot;width: 15rem; padding:1rem;border-radius: 1.75rem;&quot;&gt;
&lt;&#x2F;div&gt;
&lt;h3 id=&quot;it-would-have-been-much-better-if-it-had&quot;&gt;It would have been much better if it had...&lt;&#x2F;h3&gt;
&lt;p&gt;Some features like, the semi-automatic screen rotation that android has nowadays which would show a small prompt to rotate the screen upon rotating the device but without automatically rotating it. Also, gestures in apps like video players to scroll and double taps to skip, which would make the droidian experience much better. And, maybe a qr-code scanner to connect to wifi networks.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;lastly-some-mentions&quot;&gt;Lastly, Some Mentions&lt;&#x2F;h3&gt;
&lt;p&gt;Waydroid has been a life saver for using essential video calling apps and surprisingly banking apps. But, the default waydroid experience is very buggy. It is not the fault of droidian devs though, waydroid is a completely different project.&lt;&#x2F;p&gt;
&lt;p&gt;Gnome Online Accounts made it very easy to sync my contacts saved on google contacts, calender events, emails on droidian. It also connected my google drive with &lt;code&gt;nautilus [Gnome Files]&lt;&#x2F;code&gt; making it easy to upload and access files from my drive.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;so&quot;&gt;So,&lt;&#x2F;h3&gt;
&lt;p&gt;My experience with Linux on Mobile was interesting, though it has a lot to improve, I didn&#x27;t expect it to be &quot;functional enough&quot; that I could use it for days without diving back to android. I will use this for some more days, maybe until the Gnome Asia 2023 event ends.&lt;&#x2F;p&gt;
&lt;p&gt;There is lot more to try but, I want to end this experiment for now.&lt;&#x2F;p&gt;
&lt;p&gt;Goodnight!&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Project Pieyes</title>
        <published>2023-06-01T00:00:00+00:00</published>
        <updated>2023-06-01T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              scientiac
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://scientiac.space/blog/gesture-controlled-arm/"/>
        <id>https://scientiac.space/blog/gesture-controlled-arm/</id>
        
        <content type="html" xml:base="https://scientiac.space/blog/gesture-controlled-arm/">&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;pieyes.gif&quot; alt=&quot;Pieyes&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;&#x2F;h2&gt;
&lt;p&gt;The purpose of this report is to document the process of building a CV robotic arm prototype using Arduino. The arm is designed to be controlled with natural hand gestures removing the need to look at the buttons on a screen or a controller to control it.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;materials-used&quot;&gt;Materials Used:&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;Arduino Uno&lt;&#x2F;li&gt;
&lt;li&gt;16 Channel Servo driver&lt;&#x2F;li&gt;
&lt;li&gt;Buck Converter&lt;&#x2F;li&gt;
&lt;li&gt;Jumper Cables&lt;&#x2F;li&gt;
&lt;li&gt;3D Printed MK2 Chassis&lt;&#x2F;li&gt;
&lt;li&gt;4 Servos&lt;&#x2F;li&gt;
&lt;li&gt;A Portable Computer with Camera&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;software-used&quot;&gt;Software Used:&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;Arduino IDE V2&lt;&#x2F;li&gt;
&lt;li&gt;Python 3&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;design&quot;&gt;Design:&lt;&#x2F;h3&gt;
&lt;p&gt;The first step in building the CV controlled arm is to make a schematic of it. The arm is based on the MK2 Model, which is pretty easy to 3D-print and assemble. 4 servos are used for the base, the lower arm, the upper arm and the gripper. The servos are connected to the Servo Driver and the Servo Driver is connected to 5 volts DC power. The Arduino is used to control the Servo Driver to send PWM signals to servo.&lt;&#x2F;p&gt;
&lt;p&gt;The decisions for what signals to send for recognized gestures handled by a Python script which sends serial to Arduino via the USB. The Arduino receives the signal which is now converted to mechanical output.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;construction&quot;&gt;Construction:&lt;&#x2F;h3&gt;
&lt;p&gt;The assembly of the base is a bit tricky with gears and servos to be attached to it, but the upper part is easily attached. The four servos are placed on the right place according to MK2 schematics and are connected to 16 Channel Servo Driver. (I connected 0,2,4 and 7 as base, lower arm, upper arm and gripper respectively on the Servo Driver.) While connecting the Servo Driver to Arduino; the VCC is connected to 5 volts and Grounds of Arduino and Servo Driver are connected. From Arduino the analogue 5 pin is connected to SCL and analogue 4 pin is connected to SDA respectively.(This connects the Servo Driver to the Arduino.)&lt;&#x2F;p&gt;
&lt;p&gt;The servo diver is connected to 5 volts DC converted from 12 volts power supply using a buck converter. USB connected to the Arduino supplies power to Arduino as well as the Servo Driver but not the Servos connected to the Driver. The USB also doubles as a data transmission device to send serial input to the Arduino from the laptop running the python script.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;programming&quot;&gt;Programming&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;in-arduino&quot;&gt;In Arduino:&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;lt;Wire.h&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;lt;Adafruit_PWMServoDriver.h&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; called this way, it uses the default address 0x40
&lt;&#x2F;span&gt;&lt;span&gt;Adafruit_PWMServoDriver pwm &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Adafruit_PWMServoDriver(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0x40&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;SERVOMIN &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;100   &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; This is the &amp;#39;minimum&amp;#39; pulse length count (out of 4096)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;SERVOMAX &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;450   &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; This is the &amp;#39;maximum&amp;#39; pulse length count (out of 4096)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;SERVO_FREQ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;50  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Analog servos run at ~50 Hz updates
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; our servo # counter
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;uint8_t&lt;&#x2F;span&gt;&lt;span&gt; servonum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;char&lt;&#x2F;span&gt;&lt;span&gt; prevSerial &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;#39;\0&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;char&lt;&#x2F;span&gt;&lt;span&gt; data;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Setting the default state of the arm.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; val1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;312&lt;&#x2F;span&gt;&lt;span&gt;, val2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;350&lt;&#x2F;span&gt;&lt;span&gt;, val3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;174&lt;&#x2F;span&gt;&lt;span&gt;, val4 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;setup&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;  Serial.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;begin&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;9600&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;  Serial.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Running...&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  pwm.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;begin&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;  pwm.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;setOscillatorFrequency&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;27000000&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;  pwm.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;setPWMFreq&lt;&#x2F;span&gt;&lt;span&gt;(SERVO_FREQ);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;delay(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;loop&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; checking if serial is available or not and setting values to &amp;quot;data&amp;quot; as soon as the serial changes
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(Serial.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;available&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; Serial.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;read&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;#39;W&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(val4 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; SERVOMAX) {
&lt;&#x2F;span&gt;&lt;span&gt;        Serial.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Gripper IN&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;        Serial.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span&gt;(val4);
&lt;&#x2F;span&gt;&lt;span&gt;        pwm.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;setPWM&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;7&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, val4);
&lt;&#x2F;span&gt;&lt;span&gt;        val4 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;#39;A&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(val4 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; SERVOMIN) {
&lt;&#x2F;span&gt;&lt;span&gt;        Serial.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Gripper OUT&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;        Serial.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span&gt;(val4);
&lt;&#x2F;span&gt;&lt;span&gt;        pwm.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;setPWM&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;7&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, val4);
&lt;&#x2F;span&gt;&lt;span&gt;        val4 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;-= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;#39;Y&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(val2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; SERVOMAX) {
&lt;&#x2F;span&gt;&lt;span&gt;        Serial.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Arm Base IN&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;        Serial.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span&gt;(val2);
&lt;&#x2F;span&gt;&lt;span&gt;        pwm.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;setPWM&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, val2);
&lt;&#x2F;span&gt;&lt;span&gt;        val2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;#39;C&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(val2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; SERVOMIN) {
&lt;&#x2F;span&gt;&lt;span&gt;        Serial.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Arm Base OUT&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;        Serial.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span&gt;(val2);
&lt;&#x2F;span&gt;&lt;span&gt;        pwm.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;setPWM&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, val2);
&lt;&#x2F;span&gt;&lt;span&gt;        val2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;-= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;#39;B&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(val3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; SERVOMAX) {
&lt;&#x2F;span&gt;&lt;span&gt;        Serial.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Arm Top IN&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;        Serial.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span&gt;(val3);
&lt;&#x2F;span&gt;&lt;span&gt;        pwm.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;setPWM&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, val3);
&lt;&#x2F;span&gt;&lt;span&gt;        val3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;#39;X&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(val3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; SERVOMIN) {
&lt;&#x2F;span&gt;&lt;span&gt;        Serial.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Arm Top OUT&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;        Serial.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span&gt;(val3);
&lt;&#x2F;span&gt;&lt;span&gt;        pwm.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;setPWM&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, val3);
&lt;&#x2F;span&gt;&lt;span&gt;        val3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;-= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;#39;D&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(val1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; SERVOMAX) {
&lt;&#x2F;span&gt;&lt;span&gt;        Serial.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Base IN&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;        Serial.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span&gt;(val1);
&lt;&#x2F;span&gt;&lt;span&gt;        pwm.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;setPWM&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, val1);
&lt;&#x2F;span&gt;&lt;span&gt;        val1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;#39;Z&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(val1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; SERVOMIN) {
&lt;&#x2F;span&gt;&lt;span&gt;        Serial.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Base IN&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;        Serial.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span&gt;(val1);
&lt;&#x2F;span&gt;&lt;span&gt;        pwm.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;setPWM&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, val1);
&lt;&#x2F;span&gt;&lt;span&gt;        val1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;-= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;#39;S&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;      Serial.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;stop&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;in-laptop&quot;&gt;In Laptop:&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;py&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-py &quot;&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;#!&#x2F;bin&#x2F;python
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;cv2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;mediapipe &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span&gt;mp
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;math
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;serial &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;Serial
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;mp_drawing &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;mp.solutions.drawing_utils
&lt;&#x2F;span&gt;&lt;span&gt;mp_hands &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;mp.solutions.hands
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;calculate_distance&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;x1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;y1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;x2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;y2&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;math.sqrt((x2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;x1)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;**&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;(y2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;y1)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;**&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;is_fist&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;landmarks&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Check if all finger tips are below their corresponding middle joints
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        landmarks[mp_hands.HandLandmark.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;THUMB_TIP&lt;&#x2F;span&gt;&lt;span&gt;].y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;landmarks[mp_hands.HandLandmark.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;THUMB_IP&lt;&#x2F;span&gt;&lt;span&gt;].y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;and
&lt;&#x2F;span&gt;&lt;span&gt;        landmarks[mp_hands.HandLandmark.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;INDEX_FINGER_TIP&lt;&#x2F;span&gt;&lt;span&gt;].y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;landmarks[mp_hands.HandLandmark.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;INDEX_FINGER_PIP&lt;&#x2F;span&gt;&lt;span&gt;].y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;and
&lt;&#x2F;span&gt;&lt;span&gt;        landmarks[mp_hands.HandLandmark.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;MIDDLE_FINGER_TIP&lt;&#x2F;span&gt;&lt;span&gt;].y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;landmarks[mp_hands.HandLandmark.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;MIDDLE_FINGER_PIP&lt;&#x2F;span&gt;&lt;span&gt;].y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;and
&lt;&#x2F;span&gt;&lt;span&gt;        landmarks[mp_hands.HandLandmark.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;RING_FINGER_TIP&lt;&#x2F;span&gt;&lt;span&gt;].y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;landmarks[mp_hands.HandLandmark.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;RING_FINGER_PIP&lt;&#x2F;span&gt;&lt;span&gt;].y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;and
&lt;&#x2F;span&gt;&lt;span&gt;        landmarks[mp_hands.HandLandmark.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;PINKY_TIP&lt;&#x2F;span&gt;&lt;span&gt;].y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;landmarks[mp_hands.HandLandmark.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;PINKY_PIP&lt;&#x2F;span&gt;&lt;span&gt;].y
&lt;&#x2F;span&gt;&lt;span&gt;    )
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;get_hand_side&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;landmarks&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Check if the wrist is to the left or right of the index finger tip
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;landmarks[mp_hands.HandLandmark.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;WRIST&lt;&#x2F;span&gt;&lt;span&gt;].x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;landmarks[mp_hands.HandLandmark.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;INDEX_FINGER_TIP&lt;&#x2F;span&gt;&lt;span&gt;].x:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Left&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Right&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;():
&lt;&#x2F;span&gt;&lt;span&gt;    cap &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;cv2.VideoCapture(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;mp_hands.Hands(max_num_hands&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span&gt;hands:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;cap.isOpened()&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            ret, frame &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;cap.read()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;not &lt;&#x2F;span&gt;&lt;span&gt;ret:
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Unable to capture frame.&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;break
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Flip the frame horizontally to mirror the image
&lt;&#x2F;span&gt;&lt;span&gt;            frame &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;cv2.flip(frame, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Convert the image from BGR to RGB
&lt;&#x2F;span&gt;&lt;span&gt;            image_rgb &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Process the image with MediaPipe Hands
&lt;&#x2F;span&gt;&lt;span&gt;            results &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;hands.process(image_rgb)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Check for hand landmarks
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;results.multi_hand_landmarks:
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;hand_landmarks &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;results.multi_hand_landmarks:
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Draw hand landmarks on the image
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;mp_drawing.draw_landmarks(frame, hand_landmarks, mp_hands.HAND_CONNECTIONS)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Get the coordinates of the index finger and thumb landmarks
&lt;&#x2F;span&gt;&lt;span&gt;                    index_finger &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;hand_landmarks.landmark[mp_hands.HandLandmark.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;INDEX_FINGER_TIP&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;                    thumb &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;hand_landmarks.landmark[mp_hands.HandLandmark.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;THUMB_TIP&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;                    wrist &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;hand_landmarks.landmark[mp_hands.HandLandmark.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;WRIST&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Convert landmark coordinates to pixel values
&lt;&#x2F;span&gt;&lt;span&gt;                    height, width, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;frame.shape
&lt;&#x2F;span&gt;&lt;span&gt;                    x1, y1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;(index_finger.x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;width)&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;(index_finger.y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;height)
&lt;&#x2F;span&gt;&lt;span&gt;                    x2, y2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;(thumb.x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;width)&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;(thumb.y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;height)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Calculate the distance between the index finger and thumb
&lt;&#x2F;span&gt;&lt;span&gt;                    distance &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;calculate_distance(x1, y1, x2, y2)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Count the number of fingers that are up
&lt;&#x2F;span&gt;&lt;span&gt;                    fingers_up &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span&gt;                    landmarks &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;hand_landmarks.landmark
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;landmarks[mp_hands.HandLandmark.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;THUMB_TIP&lt;&#x2F;span&gt;&lt;span&gt;].y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;landmarks[mp_hands.HandLandmark.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;THUMB_IP&lt;&#x2F;span&gt;&lt;span&gt;].y:
&lt;&#x2F;span&gt;&lt;span&gt;                        fingers_up &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;landmarks[mp_hands.HandLandmark.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;INDEX_FINGER_TIP&lt;&#x2F;span&gt;&lt;span&gt;].y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;landmarks[mp_hands.HandLandmark.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;INDEX_FINGER_PIP&lt;&#x2F;span&gt;&lt;span&gt;].y:
&lt;&#x2F;span&gt;&lt;span&gt;                        fingers_up &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;landmarks[mp_hands.HandLandmark.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;MIDDLE_FINGER_TIP&lt;&#x2F;span&gt;&lt;span&gt;].y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;landmarks[mp_hands.HandLandmark.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;MIDDLE_FINGER_PIP&lt;&#x2F;span&gt;&lt;span&gt;].y:
&lt;&#x2F;span&gt;&lt;span&gt;                        fingers_up &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;landmarks[mp_hands.HandLandmark.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;RING_FINGER_TIP&lt;&#x2F;span&gt;&lt;span&gt;].y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;landmarks[mp_hands.HandLandmark.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;RING_FINGER_PIP&lt;&#x2F;span&gt;&lt;span&gt;].y:
&lt;&#x2F;span&gt;&lt;span&gt;                        fingers_up &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;landmarks[mp_hands.HandLandmark.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;PINKY_TIP&lt;&#x2F;span&gt;&lt;span&gt;].y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;landmarks[mp_hands.HandLandmark.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;PINKY_PIP&lt;&#x2F;span&gt;&lt;span&gt;].y:
&lt;&#x2F;span&gt;&lt;span&gt;                        fingers_up &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Determine if the hand is right or left
&lt;&#x2F;span&gt;&lt;span&gt;                    hand_side &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;get_hand_side(hand_landmarks.landmark)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Determine if there is a fist or not
&lt;&#x2F;span&gt;&lt;span&gt;                    is_hand_fist &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;is_fist(hand_landmarks.landmark)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Display the number of fingers, distance, hand side, and fist status on the image
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;cv2.putText(frame, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;(fingers_up), (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;30&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;), cv2.FONT_HERSHEY_SIMPLEX, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;, (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;255&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;cv2.putText(frame, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;(distance)), (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;70&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;), cv2.FONT_HERSHEY_SIMPLEX, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;, (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;255&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;cv2.putText(frame, hand_side, (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;110&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;), cv2.FONT_HERSHEY_SIMPLEX, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;, (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;255&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;cv2.putText(frame, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;(is_hand_fist), (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;150&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;), cv2.FONT_HERSHEY_SIMPLEX, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;, (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;255&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Combine the values
&lt;&#x2F;span&gt;&lt;span&gt;                    combined_values &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[fingers_up, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;(distance)&lt;&#x2F;span&gt;&lt;span&gt;, hand_side, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;(is_hand_fist)&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Print the combined values
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;(combined_values)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Print the corresponding letter based on the conditions
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;fingers_up &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;and &lt;&#x2F;span&gt;&lt;span&gt;distance &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;60&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Gripper IN&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;)                    
&lt;&#x2F;span&gt;&lt;span&gt;                        input_value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;#39;A&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;                        ardu &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Serial(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;#39;&#x2F;dev&#x2F;ttyUSB0&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;9600&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;, timeout&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0.01&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ardu.write(input_value.encode())
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;elif &lt;&#x2F;span&gt;&lt;span&gt;fingers_up &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;and &lt;&#x2F;span&gt;&lt;span&gt;distance &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;60&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Gripper OUT&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;                        input_value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;#39;W&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;                        ardu &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Serial(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;#39;&#x2F;dev&#x2F;ttyUSB0&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;9600&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;, timeout&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0.01&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ardu.write(input_value.encode())
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;elif &lt;&#x2F;span&gt;&lt;span&gt;fingers_up &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;4 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;and &lt;&#x2F;span&gt;&lt;span&gt;hand_side &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Right&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;and not &lt;&#x2F;span&gt;&lt;span&gt;is_hand_fist:
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Arm Base IN&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;                        input_value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;#39;C&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;                        ardu &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Serial(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;#39;&#x2F;dev&#x2F;ttyUSB0&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;9600&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;, timeout&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0.01&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ardu.write(input_value.encode())
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;elif &lt;&#x2F;span&gt;&lt;span&gt;fingers_up &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;4 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;and &lt;&#x2F;span&gt;&lt;span&gt;hand_side &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Left&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;and not &lt;&#x2F;span&gt;&lt;span&gt;is_hand_fist:
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Arm Base OUT&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;                        input_value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;#39;Y&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;                        ardu &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Serial(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;#39;&#x2F;dev&#x2F;ttyUSB0&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;9600&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;, timeout&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0.01&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ardu.write(input_value.encode())
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;elif &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;not &lt;&#x2F;span&gt;&lt;span&gt;is_hand_fist &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;and &lt;&#x2F;span&gt;&lt;span&gt;hand_side &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Right&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Arm Top IN&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;                        input_value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;#39;B&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;                        ardu &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Serial(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;#39;&#x2F;dev&#x2F;ttyUSB0&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;9600&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;, timeout&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0.01&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ardu.write(input_value.encode())
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;elif &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;not &lt;&#x2F;span&gt;&lt;span&gt;is_hand_fist &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;and &lt;&#x2F;span&gt;&lt;span&gt;hand_side &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Left&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Arm Top OUT&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;                        input_value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;#39;X&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;                        ardu &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Serial(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;#39;&#x2F;dev&#x2F;ttyUSB0&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;9600&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;, timeout&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0.01&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ardu.write(input_value.encode())
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;elif &lt;&#x2F;span&gt;&lt;span&gt;fingers_up &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;5 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;and &lt;&#x2F;span&gt;&lt;span&gt;hand_side &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Right&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Base IN&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;                        input_value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;#39;D&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;                        ardu &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Serial(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;#39;&#x2F;dev&#x2F;ttyUSB0&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;9600&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;, timeout&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0.01&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ardu.write(input_value.encode())
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;elif &lt;&#x2F;span&gt;&lt;span&gt;fingers_up &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;5 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;and &lt;&#x2F;span&gt;&lt;span&gt;hand_side &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Left&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Base OUT&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;                        input_value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;#39;Z&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;                        ardu &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Serial(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;#39;&#x2F;dev&#x2F;ttyUSB0&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;9600&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;, timeout&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0.01&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ardu.write(input_value.encode())
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;STOP&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;                        input_value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;#39;S&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;                        ardu &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Serial(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;#39;&#x2F;dev&#x2F;ttyUSB0&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;9600&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;, timeout&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0.01&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ardu.write(input_value.encode())
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Display the mirrored image with landmarks
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;cv2.imshow(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;#39;Finger Tracking&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;, frame)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Exit loop when &amp;#39;q&amp;#39; is pressed
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;cv2.waitKey(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0xFF &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;ord&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;#39;q&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;break
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;cap.release()
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;cv2.destroyAllWindows()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;__name__ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;#39;__main__&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;main()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;testing&quot;&gt;Testing:&lt;&#x2F;h3&gt;
&lt;p&gt;The arm was completed, and it was time to test it. The servos were connected to power supply and the USB was connected to the Arduino. With the necessary code uploaded to the Arduino, the python script was run, and hand gestures were read from the computer which then converted to Serial signals and the code in Arduino interprets those Serial signals as per the uploaded code. Here, in the first trial reading the Front and Back side of the hand gave same results, I replaced the code for Left and Right aligned hand, which showed Right when I showed my right-hand palm to the Camera, and left when I showed my right-hand back to the camera, and vice-versa for the left hand. Which fixed the issue.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;challenges-and-solutions&quot;&gt;Challenges and Solutions:&lt;&#x2F;h3&gt;
&lt;p&gt;There were not many challenges to make a working prototype which my arm is at the moment. But further improvement on the gestures are going to be challenging like; to read and interpret natural human arm movements in digital form and to match the movement of robot arm with an actual human arm.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion:&lt;&#x2F;h3&gt;
&lt;p&gt;In conclusion, the CV robotic arm is a working prototype for better control of devices requiring less time to adapt. It helps people to be familiar with using complex devices like robotic arm in a very short period of time.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Project Firefly</title>
        <published>2023-04-28T00:00:00+00:00</published>
        <updated>2023-04-28T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              scientiac
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://scientiac.space/blog/arduino-firefly/"/>
        <id>https://scientiac.space/blog/arduino-firefly/</id>
        
        <content type="html" xml:base="https://scientiac.space/blog/arduino-firefly/">&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;firefly.jpg&quot; alt=&quot;Firefly&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;&#x2F;h2&gt;
&lt;p&gt;The purpose of this report is to document the process of building a fire extinguishing and gas sensing car using Arduino. The car is designed to detect fire using a flame IR sensor and go towards it to extinguish it if necessary. It also detects gas leaks and alerts the user via SMS. This report will detail the steps taken to design and build the car, as well as the challenges encountered and the solutions implemented.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;materials-used&quot;&gt;Materials Used:&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;Arduino Uno&lt;&#x2F;li&gt;
&lt;li&gt;3 Flame IR Sensors&lt;&#x2F;li&gt;
&lt;li&gt;MQ-2 Gas Sensor&lt;&#x2F;li&gt;
&lt;li&gt;Motor Driver&lt;&#x2F;li&gt;
&lt;li&gt;2 DC Motor&lt;&#x2F;li&gt;
&lt;li&gt;Servo Motor&lt;&#x2F;li&gt;
&lt;li&gt;Water Pump&lt;&#x2F;li&gt;
&lt;li&gt;Fire Extinguisher (tested with water)&lt;&#x2F;li&gt;
&lt;li&gt;SIM800L GSM Module&lt;&#x2F;li&gt;
&lt;li&gt;Breadboard and Jumper Wires&lt;&#x2F;li&gt;
&lt;li&gt;Power Supply (Battery)&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;design&quot;&gt;Design:&lt;&#x2F;h3&gt;
&lt;p&gt;The first step in building the fire extinguishing and gas sensing car was to design a schematic. The car is powered by an Arduino Uno microcontroller, which controls the sensors, motors, and other components. The 3 flame IR sensors are used to detect fire from three different directions, and the MQ-2 gas sensor is used to detect gas leaks. The motor driver is used to control the DC and servo motors, which drive the car and the water pump, respectively. The fire extinguisher reservoir is mounted on top of the car and the pump pushes the extinguisher from the pipe which is spread by the back-and-forth motion of the servo motor. The SIM800L GSM module is used to send SMS alerts to the user in case of a gas leak.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;construction&quot;&gt;Construction:&lt;&#x2F;h3&gt;
&lt;p&gt;Once the schematic was finalized, the next step was to build the car. The components were connected to the Arduino Uno using a breadboard and jumper wires. The flame IR sensors were mounted on the front of the car on in the front and two facing either sides, and the MQ-2 gas sensor was mounted on top. The DC motors were connected to the motor driver and were used to drive the car. The servo motor was connected to the L298N motor driver and was connected to the fire extinguisher. The water pump was connected to the Arduino Uno and was used to pump water from the reservoir to the fire extinguisher which moved in a to and fro motion to spread the water coming out of it.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;testing&quot;&gt;Testing:&lt;&#x2F;h3&gt;
&lt;p&gt;Once the car was built, it was time to test it. The car was placed in a test environment and was subjected to various scenarios. The flame IR sensor was able to detect fire and direct the car towards it. The MQ-2 gas sensor was able to detect gas leaks and activate the SMS alert system. The fire extinguisher was successfully activated by the servo motor, and the water pump was able to pump water to the fire extinguisher.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;challenges-and-solutions&quot;&gt;Challenges and Solutions:&lt;&#x2F;h3&gt;
&lt;p&gt;One of the major challenges encountered during the construction of the car was the calibration of the flame IR sensor. The sensor needed to be calibrated to detect the flame accurately and direct the car towards it. The heater connected to our room was also detected as a fire source which made it harder to test the bot. This was solved by testing the sensor with different fire sources and adjusting the code accordingly. Our test subject for demonstration was a burning paper which was used for the calibration of flame sensor.&lt;&#x2F;p&gt;
&lt;p&gt;Another challenge was the activation of the fire extinguisher. The servo motor had to be calibrated to activate the extinguisher at the right time, and the water pump had to pump the water at the right pressure. This was solved by adjusting the code and the components until the system worked correctly.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion:&lt;&#x2F;h3&gt;
&lt;p&gt;In conclusion, the fire extinguishing and gas sensing car using Arduino is a useful device that can prevent fires and detect gas leaks. The car is powered by an Arduino Uno microcontroller and uses sensors, motors, and other components to perform its functions. The car was designed and built with the help of a schematic, and was tested successfully. The challenges encountered during the construction were solved by adjusting the code and the components. The car can be further improved by adding more sensors and refining the code as the SMS functionality was still flaky.&lt;&#x2F;p&gt;
</content>
        
    </entry>
</feed>
